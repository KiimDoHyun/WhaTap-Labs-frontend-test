[{"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx":"1","C:\\Users\\bzido\\frontend-test\\src\\index.js":"2","C:\\Users\\bzido\\frontend-test\\src\\App.tsx":"3"},{"size":7208,"mtime":1677152695612,"results":"4","hashOfConfig":"5"},{"size":1239,"mtime":1677119962215,"results":"6","hashOfConfig":"5"},{"size":7277,"mtime":1677111270251,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1grk8jl",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx",["15","16"],"import {\r\n    axisBottom,\r\n    axisLeft,\r\n    axisTop,\r\n    max,\r\n    scaleBand,\r\n    scaleLinear,\r\n    select,\r\n} from \"d3\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { arr } from \"..\";\r\nimport api from \"../api\";\r\n\r\nconst TestChart1 = () => {\r\n    const svgRef = useRef(null);\r\n    const [data, setData] = useState([\r\n        {\r\n            name: \"act_method\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_sql\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_httpc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_dbc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_socket\",\r\n            value: 0,\r\n        },\r\n    ]);\r\n\r\n    // 조회 에러 발생: 갱신 X\r\n    // api 호출 생성 함수\r\n    const apiObj = (type: string) => {\r\n        return {\r\n            callApi: () => api.spot(type),\r\n            success: (newValue: any) =>\r\n                setData((prevState) => {\r\n                    const newData = prevState.map((item) =>\r\n                        item.name === type ? { ...item, value: newValue } : item\r\n                    );\r\n                    updateChart(newData);\r\n\r\n                    return newData;\r\n                }),\r\n            fail: () => console.warn(\"api 호출에 실패했습니다.\"),\r\n        };\r\n    };\r\n\r\n    /*\r\n    값 중복이 있는 경우 어떻게 고유하게 값을 지정할지\r\n\r\n    12\r\n    7\r\n    7\r\n    4\r\n\r\n    -> 7 값이 서로다른 2개가 아닌 한개의 막대차트만 그림\r\n    */\r\n    const updateChart = (newData: any) => {\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(newData.map((item: any) => String(item.name)))\r\n            .range([20, 480]);\r\n\r\n        const yMax = max(newData, function (d: any) {\r\n            return d.value;\r\n        });\r\n\r\n        const yScale = scaleLinear()\r\n            .domain([0, Number(yMax)])\r\n            .range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        svg.selectAll(\".bar\")\r\n            .data(newData)\r\n            // css: trasition: 500 과 동일함\r\n            .transition()\r\n            .duration(500)\r\n            // 모든 데이터가 변경되는 경우 딜레이를 추가할 수 있음.\r\n            // .delay((d: any, i: any) => i * 100)\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                console.log(yScale(d.value), d.value);\r\n                return yScale(d.value) - 70;\r\n                // return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }); // x 위치는 해당 값의 x축의 위치로\r\n\r\n        svg.selectAll(\".text\")\r\n            .data(newData)\r\n            .transition()\r\n            .duration(500)\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            });\r\n    };\r\n\r\n    // 필요데이터 조회: act (액티브 스테이터스)\r\n    // 최대값 기준\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            arr.push(apiObj(\"act_method\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            arr.push(apiObj(\"act_sql\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            arr.push(apiObj(\"act_httpc\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            arr.push(apiObj(\"act_dbc\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            arr.push(apiObj(\"act_socket\"));\r\n        }, 5000);\r\n\r\n        // 막대 차트\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(data.map((item) => `${item.name}`))\r\n            .range([20, 480]);\r\n\r\n        const xAxis = axisLeft(xScale).ticks(4);\r\n        svg.select(\".x-axis\")\r\n            // .style(\"transform\", \"translateY(450px)\")\r\n            .attr(\"transform\", \"translate(70, 0)\")\r\n            .call(xAxis);\r\n\r\n        const yScale = scaleLinear().domain([0, 10]).range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"transform\", \"translate(0, 20)\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        // 텍스트 추가해보기\r\n\r\n        let bar = svg\r\n            .selectAll(\".item\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"item\");\r\n\r\n        bar.append(\"rect\")\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }) // x 위치는 해당 값의 x축의 위치로\r\n            .attr(\"x\", function (d: any, i: any) {\r\n                return 70;\r\n            }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n\r\n        bar.append(\"text\")\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            })\r\n            .attr(\"fill\", \"#919191\")\r\n            .attr(\"x\", 80)\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 54;\r\n            });\r\n    }, []);\r\n\r\n    /*\r\n    크기\r\n\r\n    default\r\n    500 * 500\r\n\r\n    */\r\n    return (\r\n        <div>\r\n            <div>\r\n                액티브 스테이터스 <div className=\"infoIcon\"></div>\r\n                <div>\r\n                    {data[0].name}: {data[0].value}\r\n                </div>\r\n                <div>\r\n                    {data[1].name}: {data[1].value}\r\n                </div>\r\n                <div>\r\n                    {data[2].name}: {data[2].value}\r\n                </div>\r\n                <div>\r\n                    {data[3].name}: {data[3].value}\r\n                </div>\r\n                <div>\r\n                    {data[4].name}: {data[4].value}\r\n                </div>\r\n            </div>\r\n            <div style={{ height: \"500px\", width: \"500px\" }}>\r\n                <svg ref={svgRef} style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <g className=\"y-axis\" />\r\n                    <g className=\"x-axis\" />\r\n                    {/* <g>\r\n                        <rect x={60} y={50} width={100} height={25}></rect>\r\n                        <text x={60} y={50} fill={\"red\"}>\r\n                            hihihihihi\r\n                        </text>\r\n                    </g> */}\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestChart1;\r\n","C:\\Users\\bzido\\frontend-test\\src\\index.js",["17"],"C:\\Users\\bzido\\frontend-test\\src\\App.tsx",["18","19","20","21","22"],{"ruleId":"23","severity":1,"message":"24","line":2,"column":5,"nodeType":"25","messageId":"26","endLine":2,"endColumn":15},{"ruleId":"27","severity":1,"message":"28","line":191,"column":8,"nodeType":"29","endLine":191,"endColumn":10,"suggestions":"30"},{"ruleId":"31","severity":1,"message":"32","line":9,"column":5,"nodeType":"25","messageId":"26","endLine":9,"endColumn":14},{"ruleId":"23","severity":1,"message":"33","line":4,"column":5,"nodeType":"25","messageId":"26","endLine":4,"endColumn":14},{"ruleId":"23","severity":1,"message":"34","line":10,"column":8,"nodeType":"25","messageId":"26","endLine":10,"endColumn":11},{"ruleId":"23","severity":1,"message":"35","line":12,"column":7,"nodeType":"25","messageId":"26","endLine":12,"endColumn":11},{"ruleId":"23","severity":1,"message":"36","line":48,"column":18,"nodeType":"25","messageId":"26","endLine":48,"endColumn":25},{"ruleId":"37","severity":1,"message":"38","line":166,"column":17,"nodeType":"39","endLine":166,"endColumn":32},"@typescript-eslint/no-unused-vars","'axisBottom' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apiObj' and 'data'. Either include them or remove the dependency array.","ArrayExpression",["40"],"no-unused-vars","'isWorking' is assigned a value but never used.","'axisRight' is defined but never used.","'api' is defined but never used.","'HOUR' is assigned a value but never used.","'setData' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",{"desc":"41","fix":"42"},"Update the dependencies array to be: [apiObj, data]",{"range":"43","text":"44"},[5403,5405],"[apiObj, data]"]