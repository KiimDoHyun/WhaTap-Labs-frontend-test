[{"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx":"1","C:\\Users\\bzido\\frontend-test\\src\\index.js":"2","C:\\Users\\bzido\\frontend-test\\src\\App.tsx":"3","C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart2.tsx":"4","C:\\Users\\bzido\\frontend-test\\src\\api.js":"5","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js":"6"},{"size":6380,"mtime":1677206713420,"results":"7","hashOfConfig":"8"},{"size":1239,"mtime":1677119962215,"results":"9","hashOfConfig":"8"},{"size":7368,"mtime":1677159058009,"results":"10","hashOfConfig":"8"},{"size":8164,"mtime":1677294834522,"results":"11","hashOfConfig":"8"},{"size":2502,"mtime":1676886050945,"results":"12","hashOfConfig":"8"},{"size":375,"mtime":1676852251020,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1grk8jl",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx",["33","34","35","36","37"],"import {\r\n    axisBottom,\r\n    axisLeft,\r\n    axisTop,\r\n    line,\r\n    max,\r\n    scaleBand,\r\n    scaleLinear,\r\n    select,\r\n} from \"d3\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { arr } from \"..\";\r\nimport api from \"../api\";\r\n\r\nconst TestChart1 = () => {\r\n    const svgRef = useRef(null);\r\n    const [data, setData] = useState([\r\n        {\r\n            name: \"act_method\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_sql\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_httpc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_dbc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_socket\",\r\n            value: 0,\r\n        },\r\n    ]);\r\n\r\n    // 조회 에러 발생: 갱신 X\r\n    // api 호출 생성 함수\r\n    const apiObj = (type: string) => {\r\n        return {\r\n            callApi: () => api.spot(type),\r\n            success: (newValue: any) =>\r\n                setData((prevState) => {\r\n                    const newData = prevState.map((item) =>\r\n                        item.name === type ? { ...item, value: newValue } : item\r\n                    );\r\n                    updateChart(newData);\r\n\r\n                    return newData;\r\n                }),\r\n            fail: () => console.warn(\"api 호출에 실패했습니다.\"),\r\n        };\r\n    };\r\n\r\n    /*\r\n    값 중복이 있는 경우 어떻게 고유하게 값을 지정할지\r\n\r\n    12\r\n    7\r\n    7\r\n    4\r\n\r\n    -> 7 값이 서로다른 2개가 아닌 한개의 막대차트만 그림\r\n    */\r\n    const updateChart = (newData: any) => {\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(newData.map((item: any) => String(item.name)))\r\n            .range([20, 480]);\r\n\r\n        const yMax = max(newData, function (d: any) {\r\n            return d.value;\r\n        });\r\n\r\n        const yScale = scaleLinear()\r\n            .domain([0, Number(yMax)])\r\n            .range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        svg.selectAll(\".bar\")\r\n            .data(newData)\r\n            // css: trasition: 500 과 동일함\r\n            .transition()\r\n            .duration(500)\r\n            // 모든 데이터가 변경되는 경우 딜레이를 추가할 수 있음.\r\n            // .delay((d: any, i: any) => i * 100)\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                return yScale(d.value) - 70;\r\n                // return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }); // x 위치는 해당 값의 x축의 위치로\r\n\r\n        svg.selectAll(\".text\")\r\n            .data(newData)\r\n            .transition()\r\n            .duration(500)\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            });\r\n    };\r\n\r\n    // 필요데이터 조회: act (액티브 스테이터스)\r\n    // 최대값 기준\r\n    useEffect(() => {\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_method\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_sql\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_httpc\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_dbc\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_socket\"));\r\n        // }, 5000);\r\n\r\n        // 막대 차트\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(data.map((item) => `${item.name}`))\r\n            .range([20, 480]);\r\n\r\n        const xAxis = axisLeft(xScale).ticks(4);\r\n        svg.select(\".x-axis\")\r\n            // .style(\"transform\", \"translateY(450px)\")\r\n            .attr(\"transform\", \"translate(70, 0)\")\r\n            .call(xAxis);\r\n\r\n        const yScale = scaleLinear().domain([0, 10]).range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"transform\", \"translate(0, 20)\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        // 텍스트 추가해보기\r\n\r\n        let bar = svg\r\n            .selectAll(\".item\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"item\");\r\n\r\n        bar.append(\"rect\")\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }) // x 위치는 해당 값의 x축의 위치로\r\n            .attr(\"x\", function (d: any, i: any) {\r\n                return 70;\r\n            }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n\r\n        bar.append(\"text\")\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            })\r\n            .attr(\"fill\", \"#919191\")\r\n            .attr(\"x\", 80)\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 54;\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                액티브 스테이터스 <div className=\"infoIcon\"></div>\r\n            </div>\r\n            <div style={{ height: \"500px\", width: \"500px\" }}>\r\n                <svg ref={svgRef} style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <g className=\"y-axis\" />\r\n                    <g className=\"x-axis\" />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestChart1;\r\n",["38","39"],"C:\\Users\\bzido\\frontend-test\\src\\index.js",["40"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nexport const arr = [];\r\n\r\nlet isWorking = false;\r\n\r\n// 체크: 0.1초 단위\r\n// 0.01초 단위로 하면 에러 발생\r\n// 이전 호출이 종료되고 호출 되어야 함.\r\nconst apiManager = () => {\r\n    setInterval(async () => {\r\n        if (arr.length > 0) {\r\n            try {\r\n                const result = await arr[0].callApi();\r\n                arr[0].success(result.data);\r\n            } catch (e) {\r\n                console.log(e);\r\n                console.log(\"에러 발생\", arr);\r\n                if (arr.length > 0) {\r\n                    arr[0].fail();\r\n                }\r\n            } finally {\r\n                arr.shift();\r\n            }\r\n        }\r\n    }, 100);\r\n};\r\n\r\napiManager();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["41","42"],"C:\\Users\\bzido\\frontend-test\\src\\App.tsx",["43","44","45","46","47"],"import {\r\n    axisBottom,\r\n    axisLeft,\r\n    axisRight,\r\n    scaleBand,\r\n    scaleLinear,\r\n    select,\r\n} from \"d3\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport api from \"./api\";\r\nimport TestChart1 from \"./component/TestChart1\";\r\nimport TestChart2 from \"./component/TestChart2\";\r\nconst HOUR = 1000 * 60 * 60;\r\n\r\nfunction App() {\r\n    // const [actAgent, setActAgent] = useState<any>();\r\n    // const [httpcSeries, setHttpcSeries] = useState<any>();\r\n\r\n    // useEffect(() => {\r\n    //     // api.spot('act_agent').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('inact_agent').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('host').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('cpucore').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('txcount').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('tps').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('actx').then((result) => {console.log(result); setActAgent(result)})\r\n    //     api.spot(\"rtime\").then((result) => {\r\n    //         console.log(result);\r\n    //         setActAgent(result);\r\n    //     });\r\n    //     // api.spot('cpu').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('threadpool_active').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('threadpool_queue').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_count').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_active').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_idle').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('act_method').then((result) => {console.log(result); setActAgent(result)})\r\n\r\n    /*\r\n    현재시간 기준 5초 동안의 데이터 조회 테스트\r\n\r\n    transaction: 데이터 없음\r\n\r\n    */\r\n\r\n    // }, []);\r\n\r\n    const svgRef = useRef(null);\r\n\r\n    const [data, setData] = useState([\r\n        { x: \"A\", y: 9 },\r\n        { x: \"B\", y: 19 },\r\n        { x: \"C\", y: 29 },\r\n        { x: \"D\", y: 39 },\r\n        { x: \"E\", y: 29 },\r\n    ]);\r\n\r\n    // const onClick = () => {\r\n    //     const rand_0_1 = Math.floor(Math.random() * 2);\r\n\r\n    //     const newData = data.map((item) => ({\r\n    //         ...item,\r\n    //         y: rand_0_1 === 0 ? (item.y += 10) : (item.y -= 10),\r\n    //     }));\r\n\r\n    //     setData(newData);\r\n    //     const svg: any = select(svgRef.current);\r\n\r\n    //     const xScale = scaleBand() // x 축\r\n    //         .domain(newData.map((item) => item.x))\r\n    //         .range([50, 450]);\r\n    //     // .padding(0.5);\r\n\r\n    //     svg.selectAll(\".bar\")\r\n    //         .data(newData)\r\n    //         // css: trasition: 500 과 동일함\r\n    //         .transition()\r\n    //         // .duration(500)\r\n    //         // 모든 데이터가 변경되는 경우 딜레이를 추가할 수 있음.\r\n    //         .delay((d: any, i: any) => i * 100)\r\n    //         .attr(\"class\", \"bar\")\r\n    //         // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n    //         .attr(\"height\", function (d: any, i: any) {\r\n    //             return d.y * 5;\r\n    //         }) // 높이는 각 값의 *5 만큼 크기로\r\n    //         .attr(\"width\", 25) // 너비는 25로\r\n    //         .attr(\"x\", function (d: any, i: string) {\r\n    //             return xScale(d.x) + 25;\r\n    //         }) // x 위치는 해당 값의 x축의 위치로\r\n    //         .attr(\"y\", function (d: any, i: any) {\r\n    //             return 450 - d.y * 5;\r\n    //         }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n    // };\r\n\r\n    useEffect(() => {\r\n        // 조회 가능한 최소 시간 범위가 5분?\r\n        /*\r\n        시각화 데이터\r\n        time_avg\r\n        time_max\r\n        time_min\r\n        time_std\r\n        time_sum\r\n         */\r\n\r\n        // bar 차트 생성\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(data.map((item) => item.x))\r\n            .range([50, 450]);\r\n        // .padding(0.5);\r\n\r\n        const yScale = scaleLinear() // y 축\r\n            .domain([0, 200]) // 실제값의 범위, // 최대값 찾아서 범위 지정?\r\n            .range([450, 50]); // 차트를 그리기 위해 크기를 지정.\r\n\r\n        const xAxis = axisBottom(xScale).ticks(4);\r\n        svg.select(\".x-axis\")\r\n            .style(\"transform\", \"translateY(450px)\")\r\n            .call(xAxis);\r\n\r\n        const yAxis = axisLeft(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"height\", \"100%\")\r\n            .attr(\"transform\", \"translate(50, 0)\")\r\n            .call(yAxis);\r\n\r\n        // 데이터 수정 관련 transition, duration을 여기에 추가하면 작동하지 않음.\r\n        // 외부 이벤트에서 조작해야 한다?\r\n\r\n        svg.selectAll(\".bar\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"rect\")\r\n            // 작동 X\r\n            // .transition()\r\n            // .duration(500)\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"height\", function (d: any, i: any) {\r\n                return d.y * 5;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"width\", 25) // 너비는 25로\r\n            .attr(\"x\", function (d: any, i: string) {\r\n                return xScale(d.x) + 25;\r\n            }) // x 위치는 해당 값의 x축의 위치로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return 450 - d.y * 5;\r\n            }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n    }, [data]);\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            {/* 인포메틱스 4개 */}\r\n\r\n            {/* d3로 제작 */}\r\n            {/* 바 차트1 - 트랜잭션 관련 3개 */}\r\n            {/* 바 차트2 - 쓰레드 풀 관련 2개 */}\r\n            {/* json 하나 정해서 라인 \r\n      x: 호출 시간\r\n      y: 호출 값 전부\r\n      */}\r\n            <TestChart1 />\r\n            <TestChart2 />\r\n            <div style={{ height: \"500px\", width: \"500px\" }}>\r\n                <svg ref={svgRef} style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <g className=\"y-axis\" />\r\n                    <g className=\"x-axis\" />\r\n                </svg>\r\n            </div>\r\n            {/* <button onClick={onClick}>데이터 변경</button> */}\r\n\r\n            <h1>Open API (Application)</h1>\r\n            <a\r\n                href=\"https://docs.whatap.io/kr/appendix/open_api_application.pdf\"\r\n                target=\"_blank\"\r\n            >\r\n                가이드 문서\r\n            </a>\r\n            <h2>프로젝트 API 예시</h2>\r\n            <h3>Spot 정보 조회 URL</h3>\r\n            {/* <pre>{JSON.stringify(actAgent, null, 4)}</pre> */}\r\n            <hr />\r\n            <h3>통계 정보 조회 URL</h3>\r\n            {/* <pre>{JSON.stringify(httpcSeries, null, 4)}</pre> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n",["48","49"],"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart2.tsx",["50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"C:\\Users\\bzido\\frontend-test\\src\\api.js",["65"],"const DEMO_PROJECT_API_TOCKEN = 'XGJHUSQZTI2AVIENWA27HI5V';\r\nconst DEMO_PROJECT_CODE = 5490;\r\nconst OPEN_API_HEADERS = {\r\n  'x-whatap-pcode': DEMO_PROJECT_CODE,\r\n  'x-whatap-token': DEMO_PROJECT_API_TOCKEN,\r\n};\r\n\r\nconst OPEN_API_ROOT = 'https://api.whatap.io/open/api';\r\n\r\nconst OPEN_API = {\r\n  '': {\r\n    // 몇개 정해서 인포매틱스로?\r\n    act_agent: '활성화 상태의 에이전트 수',\r\n    inact_agent: '비활성화 상태의 에이전트 수',\r\n    host: '호스트 수',\r\n    cpucore: '호스트의 CPU 코어 합',\r\n\r\n    // 트랜잭션 관련\r\n    txcount: '트랜잭션 수',\r\n    tps: '초당 트랜잭션 수',\r\n    actx: '액티브 트랜잭션 수',\r\n\r\n    // 기타\r\n    user: '5분간 집계된 고유 사용자 수',\r\n    rtime: '평균 응답 시간',\r\n    cpu: 'CPU 사용률',\r\n\r\n    // 쓰레드 풀 관련\r\n    threadpool_active: '쓰레드풀 활성 쓰레드 수',\r\n    threadpool_queue: '쓰레드풀 큐잉 쓰레드 수',\r\n\r\n    // DB 관련?\r\n    dbc_count: '전체 DB Connection 수',\r\n    dbc_active: '활성(Active) DB Connection 수',\r\n    dbc_idle: '비활성(Idle) DB Connection 수',\r\n\r\n    // Active 관련?\r\n    act_method: '액티브 Method 수',\r\n    act_sql: '액티브 SQL 수',\r\n    act_httpc: '액티브 HTTP Call 수',\r\n    act_dbc: '액티브 DB Connection 수',\r\n    act_socket: '액티브 Socket 수',\r\n  },\r\n\r\n  // 하나 정해서 라인차트로\r\n  json: {\r\n    'exception/{stime}/{etime}': 'Exception 발생',\r\n    'sql/{stime}/{etime}': 'SQL',\r\n    'httpc/{stime}/{etime}': 'HTTP 외부호출',\r\n    'remote/{stime}/{etime}': 'client IP',\r\n    'transaction/{stime}/{etime}': '트랜잭션',\r\n  },\r\n};\r\nconst getPath = (url, param = {}) => {\r\n  let path = url;\r\n  for (let key in param) {\r\n    path = path.replace(new RegExp('\\\\{' + key + '\\\\}', 'g'), param[key]);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\nconst getOpenApi = (type) => (key, param) =>\r\n  new Promise((resolve, reject) => {\r\n    if (key in OPEN_API[type]) {\r\n      return resolve({ url: [OPEN_API_ROOT, type, key].filter((path) => !!path).join('/'), name: OPEN_API[type][key] });\r\n    } else {\r\n      reject('잘못된 API 정보');\r\n    }\r\n  }).then(({ url, name }) =>\r\n    fetch(getPath(url, param), {\r\n      headers: OPEN_API_HEADERS,\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => ({\r\n        key,\r\n        name,\r\n        data,\r\n      })),\r\n  );\r\n\r\nconst spot = getOpenApi('');\r\nconst series = getOpenApi('json');\r\n\r\nexport default { spot, series };\r\n","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js",[],{"ruleId":"66","severity":1,"message":"67","line":2,"column":5,"nodeType":"68","messageId":"69","endLine":2,"endColumn":15},{"ruleId":"66","severity":1,"message":"70","line":5,"column":5,"nodeType":"68","messageId":"69","endLine":5,"endColumn":9},{"ruleId":"66","severity":1,"message":"71","line":12,"column":10,"nodeType":"68","messageId":"69","endLine":12,"endColumn":13},{"ruleId":"66","severity":1,"message":"72","line":42,"column":11,"nodeType":"68","messageId":"69","endLine":42,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":191,"column":8,"nodeType":"75","endLine":191,"endColumn":10,"suggestions":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":9,"column":5,"nodeType":"68","messageId":"69","endLine":9,"endColumn":14},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"66","severity":1,"message":"83","line":4,"column":5,"nodeType":"68","messageId":"69","endLine":4,"endColumn":14},{"ruleId":"66","severity":1,"message":"84","line":10,"column":8,"nodeType":"68","messageId":"69","endLine":10,"endColumn":11},{"ruleId":"66","severity":1,"message":"85","line":13,"column":7,"nodeType":"68","messageId":"69","endLine":13,"endColumn":11},{"ruleId":"66","severity":1,"message":"86","line":50,"column":18,"nodeType":"68","messageId":"69","endLine":50,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":177,"column":17,"nodeType":"89","endLine":177,"endColumn":32},{"ruleId":"77","replacedBy":"90"},{"ruleId":"79","replacedBy":"91"},{"ruleId":"66","severity":1,"message":"92","line":2,"column":5,"nodeType":"68","messageId":"69","endLine":2,"endColumn":11},{"ruleId":"66","severity":1,"message":"93","line":8,"column":5,"nodeType":"68","messageId":"69","endLine":8,"endColumn":8},{"ruleId":"66","severity":1,"message":"94","line":9,"column":5,"nodeType":"68","messageId":"69","endLine":9,"endColumn":17},{"ruleId":"66","severity":1,"message":"95","line":15,"column":5,"nodeType":"68","messageId":"69","endLine":15,"endColumn":14},{"ruleId":"66","severity":1,"message":"96","line":17,"column":45,"nodeType":"68","messageId":"69","endLine":17,"endColumn":53},{"ruleId":"66","severity":1,"message":"97","line":22,"column":7,"nodeType":"68","messageId":"69","endLine":22,"endColumn":15},{"ruleId":"66","severity":1,"message":"98","line":23,"column":7,"nodeType":"68","messageId":"69","endLine":23,"endColumn":12},{"ruleId":"66","severity":1,"message":"99","line":24,"column":7,"nodeType":"68","messageId":"69","endLine":24,"endColumn":11},{"ruleId":"66","severity":1,"message":"100","line":33,"column":11,"nodeType":"68","messageId":"69","endLine":33,"endColumn":16},{"ruleId":"73","severity":1,"message":"101","line":35,"column":8,"nodeType":"75","endLine":35,"endColumn":24,"suggestions":"102"},{"ruleId":"66","severity":1,"message":"103","line":37,"column":11,"nodeType":"68","messageId":"69","endLine":37,"endColumn":17},{"ruleId":"73","severity":1,"message":"101","line":39,"column":8,"nodeType":"75","endLine":39,"endColumn":24,"suggestions":"104"},{"ruleId":"66","severity":1,"message":"105","line":41,"column":11,"nodeType":"68","messageId":"69","endLine":41,"endColumn":16},{"ruleId":"66","severity":1,"message":"98","line":115,"column":13,"nodeType":"68","messageId":"69","endLine":115,"endColumn":18},{"ruleId":"66","severity":1,"message":"106","line":143,"column":13,"nodeType":"68","messageId":"69","endLine":143,"endColumn":24},{"ruleId":"107","severity":1,"message":"108","line":85,"column":1,"nodeType":"109","endLine":85,"endColumn":33},"@typescript-eslint/no-unused-vars","'axisBottom' is defined but never used.","Identifier","unusedVar","'line' is defined but never used.","'arr' is defined but never used.","'apiObj' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["110"],"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'isWorking' is assigned a value but never used.","'axisRight' is defined but never used.","'api' is defined but never used.","'HOUR' is assigned a value but never used.","'setData' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["111"],["112"],"'active' is defined but never used.","'max' is defined but never used.","'randomNormal' is defined but never used.","'timeParse' is defined but never used.","'useState' is defined but never used.","'now' is assigned a value but never used.","'count' is assigned a value but never used.","'data' is assigned a value but never used.","'width' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'svgRef.current'. Either exclude it or remove the dependency array. Mutable values like 'svgRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["113"],"'height' is assigned a value but never used.",["114"],"'draw1' is assigned a value but never used.","'myLine' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"115","fix":"116"},"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"117","fix":"119"},"Update the dependencies array to be: [data]",{"range":"120","text":"121"},"Update the dependencies array to be: []",{"range":"122","text":"123"},{"range":"124","text":"123"},[5403,5405],"[data]",[759,775],"[]",[902,918]]