[{"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx":"1","C:\\Users\\bzido\\frontend-test\\src\\index.js":"2","C:\\Users\\bzido\\frontend-test\\src\\App.tsx":"3","C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart2.tsx":"4","C:\\Users\\bzido\\frontend-test\\src\\api.js":"5","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js":"6","C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart3.tsx":"7"},{"size":6347,"mtime":1677334406380,"results":"8","hashOfConfig":"9"},{"size":1348,"mtime":1677390193455,"results":"10","hashOfConfig":"9"},{"size":4994,"mtime":1677406217229,"results":"11","hashOfConfig":"9"},{"size":5556,"mtime":1677411642844,"results":"12","hashOfConfig":"9"},{"size":2502,"mtime":1676886050945,"results":"13","hashOfConfig":"9"},{"size":375,"mtime":1676852251020,"results":"14","hashOfConfig":"9"},{"size":2559,"mtime":1677406645102,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1grk8jl",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx",["33","34","35"],"import {\r\n    axisBottom,\r\n    axisLeft,\r\n    axisTop,\r\n    line,\r\n    max,\r\n    scaleBand,\r\n    scaleLinear,\r\n    select,\r\n} from \"d3\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { queue } from \"..\";\r\nimport api from \"../api\";\r\n\r\nconst TestChart1 = () => {\r\n    const svgRef = useRef(null);\r\n    const [data, setData] = useState([\r\n        {\r\n            name: \"act_method\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_sql\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_httpc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_dbc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_socket\",\r\n            value: 0,\r\n        },\r\n    ]);\r\n\r\n    // 조회 에러 발생: 갱신 X\r\n    // api 호출 생성 함수\r\n    const apiObj = (type: string) => {\r\n        return {\r\n            callApi: () => api.spot(type),\r\n            success: (newValue: any) =>\r\n                setData((prevState) => {\r\n                    const newData = prevState.map((item) =>\r\n                        item.name === type ? { ...item, value: newValue } : item\r\n                    );\r\n                    updateChart(newData);\r\n\r\n                    return newData;\r\n                }),\r\n            fail: () => console.warn(\"api 호출에 실패했습니다.\"),\r\n        };\r\n    };\r\n\r\n    /*\r\n    값 중복이 있는 경우 어떻게 고유하게 값을 지정할지\r\n\r\n    12\r\n    7\r\n    7\r\n    4\r\n\r\n    -> 7 값이 서로다른 2개가 아닌 한개의 막대차트만 그림\r\n    */\r\n    const updateChart = (newData: any) => {\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(newData.map((item: any) => String(item.name)))\r\n            .range([20, 480]);\r\n\r\n        const yMax = max(newData, function (d: any) {\r\n            return d.value;\r\n        });\r\n\r\n        const yScale = scaleLinear()\r\n            .domain([0, Number(yMax)])\r\n            .range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        svg.selectAll(\".bar\")\r\n            .data(newData)\r\n            // css: trasition: 500 과 동일함\r\n            .transition()\r\n            .duration(500)\r\n            // 모든 데이터가 변경되는 경우 딜레이를 추가할 수 있음.\r\n            // .delay((d: any, i: any) => i * 100)\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                return yScale(d.value) - 70;\r\n                // return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }); // x 위치는 해당 값의 x축의 위치로\r\n\r\n        svg.selectAll(\".text\")\r\n            .data(newData)\r\n            .transition()\r\n            .duration(500)\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            });\r\n    };\r\n\r\n    // 필요데이터 조회: act (액티브 스테이터스)\r\n    // 최대값 기준\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            queue.push(apiObj(\"act_method\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            queue.push(apiObj(\"act_sql\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            queue.push(apiObj(\"act_httpc\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            queue.push(apiObj(\"act_dbc\"));\r\n        }, 5000);\r\n        setInterval(() => {\r\n            queue.push(apiObj(\"act_socket\"));\r\n        }, 5000);\r\n\r\n        // 막대 차트\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(data.map((item) => `${item.name}`))\r\n            .range([20, 480]);\r\n\r\n        const xAxis = axisLeft(xScale).ticks(4);\r\n        svg.select(\".x-axis\")\r\n            // .style(\"transform\", \"translateY(450px)\")\r\n            .attr(\"transform\", \"translate(70, 0)\")\r\n            .call(xAxis);\r\n\r\n        const yScale = scaleLinear().domain([0, 10]).range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"transform\", \"translate(0, 20)\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        // 텍스트 추가해보기\r\n\r\n        let bar = svg\r\n            .selectAll(\".item\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"item\");\r\n\r\n        bar.append(\"rect\")\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }) // x 위치는 해당 값의 x축의 위치로\r\n            .attr(\"x\", function (d: any, i: any) {\r\n                return 70;\r\n            }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n\r\n        bar.append(\"text\")\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            })\r\n            .attr(\"fill\", \"#919191\")\r\n            .attr(\"x\", 80)\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 54;\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                액티브 스테이터스 <div className=\"infoIcon\"></div>\r\n            </div>\r\n            <div style={{ height: \"500px\", width: \"500px\" }}>\r\n                <svg ref={svgRef} style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <g className=\"y-axis\" />\r\n                    <g className=\"x-axis\" />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestChart1;\r\n",["36","37"],"C:\\Users\\bzido\\frontend-test\\src\\index.js",[],"C:\\Users\\bzido\\frontend-test\\src\\App.tsx",["38","39"],"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart2.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\api.js",["40"],"const DEMO_PROJECT_API_TOCKEN = 'XGJHUSQZTI2AVIENWA27HI5V';\r\nconst DEMO_PROJECT_CODE = 5490;\r\nconst OPEN_API_HEADERS = {\r\n  'x-whatap-pcode': DEMO_PROJECT_CODE,\r\n  'x-whatap-token': DEMO_PROJECT_API_TOCKEN,\r\n};\r\n\r\nconst OPEN_API_ROOT = 'https://api.whatap.io/open/api';\r\n\r\nconst OPEN_API = {\r\n  '': {\r\n    // 몇개 정해서 인포매틱스로?\r\n    act_agent: '활성화 상태의 에이전트 수',\r\n    inact_agent: '비활성화 상태의 에이전트 수',\r\n    host: '호스트 수',\r\n    cpucore: '호스트의 CPU 코어 합',\r\n\r\n    // 트랜잭션 관련\r\n    txcount: '트랜잭션 수',\r\n    tps: '초당 트랜잭션 수',\r\n    actx: '액티브 트랜잭션 수',\r\n\r\n    // 기타\r\n    user: '5분간 집계된 고유 사용자 수',\r\n    rtime: '평균 응답 시간',\r\n    cpu: 'CPU 사용률',\r\n\r\n    // 쓰레드 풀 관련\r\n    threadpool_active: '쓰레드풀 활성 쓰레드 수',\r\n    threadpool_queue: '쓰레드풀 큐잉 쓰레드 수',\r\n\r\n    // DB 관련?\r\n    dbc_count: '전체 DB Connection 수',\r\n    dbc_active: '활성(Active) DB Connection 수',\r\n    dbc_idle: '비활성(Idle) DB Connection 수',\r\n\r\n    // Active 관련?\r\n    act_method: '액티브 Method 수',\r\n    act_sql: '액티브 SQL 수',\r\n    act_httpc: '액티브 HTTP Call 수',\r\n    act_dbc: '액티브 DB Connection 수',\r\n    act_socket: '액티브 Socket 수',\r\n  },\r\n\r\n  // 하나 정해서 라인차트로\r\n  json: {\r\n    'exception/{stime}/{etime}': 'Exception 발생',\r\n    'sql/{stime}/{etime}': 'SQL',\r\n    'httpc/{stime}/{etime}': 'HTTP 외부호출',\r\n    'remote/{stime}/{etime}': 'client IP',\r\n    'transaction/{stime}/{etime}': '트랜잭션',\r\n  },\r\n};\r\nconst getPath = (url, param = {}) => {\r\n  let path = url;\r\n  for (let key in param) {\r\n    path = path.replace(new RegExp('\\\\{' + key + '\\\\}', 'g'), param[key]);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\nconst getOpenApi = (type) => (key, param) =>\r\n  new Promise((resolve, reject) => {\r\n    if (key in OPEN_API[type]) {\r\n      return resolve({ url: [OPEN_API_ROOT, type, key].filter((path) => !!path).join('/'), name: OPEN_API[type][key] });\r\n    } else {\r\n      reject('잘못된 API 정보');\r\n    }\r\n  }).then(({ url, name }) =>\r\n    fetch(getPath(url, param), {\r\n      headers: OPEN_API_HEADERS,\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => ({\r\n        key,\r\n        name,\r\n        data,\r\n      })),\r\n  );\r\n\r\nconst spot = getOpenApi('');\r\nconst series = getOpenApi('json');\r\n\r\nexport default { spot, series };\r\n","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart3.tsx",[],{"ruleId":"41","severity":1,"message":"42","line":2,"column":5,"nodeType":"43","messageId":"44","endLine":2,"endColumn":15},{"ruleId":"41","severity":1,"message":"45","line":5,"column":5,"nodeType":"43","messageId":"44","endLine":5,"endColumn":9},{"ruleId":"46","severity":1,"message":"47","line":191,"column":8,"nodeType":"48","endLine":191,"endColumn":10,"suggestions":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"41","severity":1,"message":"54","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":11},{"ruleId":"41","severity":1,"message":"55","line":6,"column":7,"nodeType":"43","messageId":"44","endLine":6,"endColumn":11},{"ruleId":"56","severity":1,"message":"57","line":85,"column":1,"nodeType":"58","endLine":85,"endColumn":33},"@typescript-eslint/no-unused-vars","'axisBottom' is defined but never used.","Identifier","unusedVar","'line' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apiObj' and 'data'. Either include them or remove the dependency array.","ArrayExpression",["59"],"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"'api' is defined but never used.","'HOUR' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"62","fix":"63"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [apiObj, data]",{"range":"64","text":"65"},[5370,5372],"[apiObj, data]"]