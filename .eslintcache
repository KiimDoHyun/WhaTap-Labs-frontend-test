[{"C:\\Users\\bzido\\frontend-test\\src\\index.js":"1","C:\\Users\\bzido\\frontend-test\\src\\App.tsx":"2","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js":"3","C:\\Users\\bzido\\frontend-test\\src\\component\\Widget.tsx":"4","C:\\Users\\bzido\\frontend-test\\src\\hook\\useResize.tsx":"5","C:\\Users\\bzido\\frontend-test\\src\\component\\Widget\\WidgetModal.tsx":"6","C:\\Users\\bzido\\frontend-test\\src\\page\\Dashboard.tsx":"7","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader.tsx":"8","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\DateBox.tsx":"9","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart\\InforMaticsBox.tsx":"10","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\BarChart.tsx":"11","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\LineChart.tsx":"12","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\RealTime.tsx":"13","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart.tsx":"14","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\CurrentTime.tsx":"15","C:\\Users\\bzido\\frontend-test\\src\\router\\Router.tsx":"16","C:\\Users\\bzido\\frontend-test\\src\\component\\common\\DatePicker\\ListPicker.tsx":"17","C:\\Users\\bzido\\frontend-test\\src\\common\\date.ts":"18","C:\\Users\\bzido\\frontend-test\\src\\store\\DashboardProvider.tsx":"19","C:\\Users\\bzido\\frontend-test\\src\\component\\common\\DatePicker.tsx":"20","C:\\Users\\bzido\\frontend-test\\src\\hook\\useOutsideClick.tsx":"21","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\DatePickerArea.tsx":"22","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\SelectRealTimeRangeArea.tsx":"23","C:\\Users\\bzido\\frontend-test\\src\\hook\\useBoolean.tsx":"24","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\SelectRealTimeListItem.tsx":"25","C:\\Users\\bzido\\frontend-test\\src\\common\\chart.ts":"26","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\CommonStyle.ts":"27","C:\\Users\\bzido\\frontend-test\\src\\api.ts":"28","C:\\Users\\bzido\\frontend-test\\src\\store\\WidgetProvider.tsx":"29","C:\\Users\\bzido\\frontend-test\\src\\component\\Widget\\WidgetChart.tsx":"30","C:\\Users\\bzido\\frontend-test\\src\\common\\widget.ts":"31","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\WidgetPropsSettingModal.tsx":"32","C:\\Users\\bzido\\frontend-test\\src\\hook\\Widget\\useWidgetButton.tsx":"33"},{"size":1694,"mtime":1678369064504,"results":"34","hashOfConfig":"35"},{"size":408,"mtime":1678148237133,"results":"36","hashOfConfig":"35"},{"size":375,"mtime":1676852251020,"results":"37","hashOfConfig":"35"},{"size":5555,"mtime":1678421171876,"results":"38","hashOfConfig":"35"},{"size":1051,"mtime":1677421584514,"results":"39","hashOfConfig":"35"},{"size":2644,"mtime":1678421215980,"results":"40","hashOfConfig":"35"},{"size":1395,"mtime":1678369111002,"results":"41","hashOfConfig":"35"},{"size":2441,"mtime":1678275226981,"results":"42","hashOfConfig":"35"},{"size":568,"mtime":1678074907916,"results":"43","hashOfConfig":"35"},{"size":687,"mtime":1678074907931,"results":"44","hashOfConfig":"35"},{"size":4927,"mtime":1678282025982,"results":"45","hashOfConfig":"35"},{"size":4452,"mtime":1678361699878,"results":"46","hashOfConfig":"35"},{"size":632,"mtime":1678074907919,"results":"47","hashOfConfig":"35"},{"size":743,"mtime":1678198650508,"results":"48","hashOfConfig":"35"},{"size":1024,"mtime":1678074907914,"results":"49","hashOfConfig":"35"},{"size":266,"mtime":1678074907943,"results":"50","hashOfConfig":"35"},{"size":1599,"mtime":1678074907935,"results":"51","hashOfConfig":"35"},{"size":929,"mtime":1678185126514,"results":"52","hashOfConfig":"35"},{"size":949,"mtime":1678270937754,"results":"53","hashOfConfig":"35"},{"size":2097,"mtime":1678074907933,"results":"54","hashOfConfig":"35"},{"size":620,"mtime":1678074907938,"results":"55","hashOfConfig":"35"},{"size":3093,"mtime":1678169357787,"results":"56","hashOfConfig":"35"},{"size":2348,"mtime":1678186537791,"results":"57","hashOfConfig":"35"},{"size":684,"mtime":1678074907937,"results":"58","hashOfConfig":"35"},{"size":1028,"mtime":1678012971654,"results":"59","hashOfConfig":"35"},{"size":4343,"mtime":1678361690734,"results":"60","hashOfConfig":"35"},{"size":634,"mtime":1678169331630,"results":"61","hashOfConfig":"35"},{"size":2972,"mtime":1678183982316,"results":"62","hashOfConfig":"35"},{"size":4261,"mtime":1678414689360,"results":"63","hashOfConfig":"35"},{"size":973,"mtime":1678197464562,"results":"64","hashOfConfig":"35"},{"size":72,"mtime":1678168115866,"results":"65","hashOfConfig":"35"},{"size":7907,"mtime":1678278248772,"results":"66","hashOfConfig":"35"},{"size":1054,"mtime":1678417239490,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1grk8jl",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\bzido\\frontend-test\\src\\index.js",[],"C:\\Users\\bzido\\frontend-test\\src\\App.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js",[],["147","148"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Widget.tsx",["149","150"],"C:\\Users\\bzido\\frontend-test\\src\\hook\\useResize.tsx",["151"],"import React, { RefObject, useState, useEffect } from \"react\";\r\nimport debounce from \"lodash/debounce\";\r\n\r\nconst useResize = (ref: RefObject<HTMLDivElement>) => {\r\n    const [state, setState] = useState({ width: 0, height: 0 });\r\n\r\n    useEffect(() => {\r\n        /*\r\n        resize 마다 이벤트를 발생시켜 svg를 매번 다시 그리면 요구되는 작업량이 많기 때문에\r\n        debounce로 과도한 요청을 방지한다.\r\n\r\n        디바운스 단위시간: 0.3초\r\n        */\r\n        const getSize = debounce(() => {\r\n            if (!ref || !ref.current) {\r\n                return;\r\n            }\r\n            const width = ref.current.offsetWidth;\r\n            const height = ref.current.offsetHeight;\r\n            setState({\r\n                width,\r\n                height,\r\n            });\r\n        }, 300);\r\n\r\n        window.addEventListener(\"resize\", getSize);\r\n        getSize();\r\n        return () => window.removeEventListener(\"resize\", getSize);\r\n    }, [ref]);\r\n    return state;\r\n};\r\n\r\nexport default useResize;\r\n",["152","153"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Widget\\WidgetModal.tsx",["154"],"C:\\Users\\bzido\\frontend-test\\src\\page\\Dashboard.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\DateBox.tsx",[],["155","156"],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart\\InforMaticsBox.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\BarChart.tsx",[],["157","158"],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\LineChart.tsx",["159","160"],"import { select } from \"d3\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    createLineXScale,\r\n    createLineYScale,\r\n    drawLine,\r\n    drawLineXAxis,\r\n    drawyLineAxis,\r\n    initLine,\r\n} from \"../../common/chart\";\r\nimport useResize from \"../../hook/useResize\";\r\nimport { ChartPropsType } from \"../../types/chart\";\r\n\r\nlet data: any = [];\r\n\r\nlet series: string[] = [];\r\n\r\nconst margin = { top: 20, right: 20, bottom: 20, left: 40 };\r\n\r\nconst yAxis = {\r\n    transform: `translate(${margin.left}, ${margin.bottom})`,\r\n};\r\n\r\nconst lineStyle = {\r\n    fill: \"none\",\r\n    stroke: \"blue\",\r\n    strokeWidth: \"1px\",\r\n    transform: `translate(${margin.left}, ${margin.bottom})`,\r\n};\r\n\r\nconst Chart = React.memo(({ svgRef }: ChartPropsType) => {\r\n    return (\r\n        <svg ref={svgRef}>\r\n            <g className=\"y-axis\" {...yAxis} />\r\n            <g className=\"x-axis\" />\r\n            <path className=\"line\" {...lineStyle} />\r\n        </svg>\r\n    );\r\n});\r\n\r\nconst LineChart = ({ dataSource, apiInfo }: any) => {\r\n    const svgRef = useRef(null);\r\n    const svgParentBoxRef = useRef(null);\r\n    const size = useResize(svgParentBoxRef);\r\n\r\n    const renderChart = (parentWidth: any, parentHeight: any, type: string) => {\r\n        const { startDate, endDate, dif, callCycle } = apiInfo;\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const width = parentWidth - margin.left - margin.right;\r\n        const height = parentHeight - margin.top - margin.bottom;\r\n\r\n        const xScale = createLineXScale(startDate, endDate, width);\r\n        drawLineXAxis(margin, svg, height, xScale);\r\n\r\n        const yScale = createLineYScale(data, height);\r\n        drawyLineAxis(svg, yScale);\r\n\r\n        if (type === \"INIT\") {\r\n            initLine(svg, data, series);\r\n        } else if (type === \"DRAW\") {\r\n            drawLine(\r\n                svg,\r\n                xScale,\r\n                yScale,\r\n                width,\r\n                startDate,\r\n                endDate,\r\n                data,\r\n                dif,\r\n                callCycle\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const names = dataSource.map((item: any) => item.name);\r\n        if (JSON.stringify(series) !== JSON.stringify(names)) {\r\n            series = names;\r\n            data = [];\r\n\r\n            dataSource.forEach((item: any) => {\r\n                const targetIndex = series.findIndex(\r\n                    (seriesItem) => seriesItem === item.name\r\n                );\r\n\r\n                if (!data[targetIndex]) {\r\n                    data[targetIndex] = [];\r\n                }\r\n                if (item.data !== null) {\r\n                    data[targetIndex].push(item);\r\n                }\r\n            });\r\n\r\n            const {\r\n                current: { offsetWidth, offsetHeight },\r\n            } = svgParentBoxRef;\r\n\r\n            renderChart(offsetWidth, offsetHeight, \"INIT\");\r\n        } else {\r\n            dataSource.forEach((item: any) => {\r\n                const targetIndex = series.findIndex(\r\n                    (seriesItem) => seriesItem === item.name\r\n                );\r\n\r\n                if (!data[targetIndex]) {\r\n                    data[targetIndex] = [];\r\n                }\r\n                if (item.data !== null) {\r\n                    data[targetIndex].push(item);\r\n                }\r\n            });\r\n        }\r\n    }, [dataSource]);\r\n\r\n    useEffect(() => {\r\n        const { dif, callCycle } = apiInfo;\r\n        if (dif === 0 || callCycle === 0) return;\r\n\r\n        data.forEach((dataItem: any) => {\r\n            while (dataItem.length >= dif / callCycle) {\r\n                dataItem.shift();\r\n            }\r\n        });\r\n    }, [dataSource, apiInfo]);\r\n\r\n    // 데이터 바인딩\r\n    useEffect(() => {\r\n        const { width, height } = size;\r\n\r\n        svgRef.current.style.width = width;\r\n        svgRef.current.style.height = height;\r\n\r\n        renderChart(width, height, \"DRAW\");\r\n    }, [apiInfo, size]);\r\n\r\n    return (\r\n        <LineChartBox ref={svgParentBoxRef}>\r\n            <Chart svgRef={svgRef} />\r\n        </LineChartBox>\r\n    );\r\n};\r\n\r\nconst LineChartBox = styled.div`\r\n    width: 100%;\r\n\r\n    min-width: 250px;\r\n    min-height: 300px;\r\n\r\n    position: relative;\r\n\r\n    .lineChart {\r\n        fill: none;\r\n        stroke-width: 1px;\r\n        transform: translate(${margin.left}px, ${margin.bottom}px);\r\n    }\r\n`;\r\n\r\nexport default LineChart;\r\n","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\RealTime.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\CurrentTime.tsx",[],["161","162"],"C:\\Users\\bzido\\frontend-test\\src\\router\\Router.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\common\\DatePicker\\ListPicker.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\common\\date.ts",[],"C:\\Users\\bzido\\frontend-test\\src\\store\\DashboardProvider.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\common\\DatePicker.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\hook\\useOutsideClick.tsx",["163"],"import { useEffect, useRef } from \"react\";\r\n\r\nconst useOutsideClick = (callback: Function) => {\r\n    const ref = useRef(null);\r\n    useEffect(() => {\r\n        const handleClick = (event: MouseEvent) => {\r\n            const target = event.target as HTMLElement;\r\n            if (ref.current && !ref.current.contains(target)) {\r\n                callback();\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"click\", handleClick);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"click\", handleClick);\r\n        };\r\n    }, [ref]);\r\n\r\n    return ref;\r\n};\r\n\r\nexport default useOutsideClick;\r\n","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\DatePickerArea.tsx",[],["164","165"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\SelectRealTimeRangeArea.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\hook\\useBoolean.tsx",[],["166","167"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\SelectRealTimeListItem.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\common\\chart.ts",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\CommonStyle.ts",[],"C:\\Users\\bzido\\frontend-test\\src\\api.ts",["168"],"import { DataType, OPEN_APIType } from \"./types/api\";\r\n\r\nconst DEMO_PROJECT_API_TOCKEN = \"XGJHUSQZTI2AVIENWA27HI5V\";\r\nconst DEMO_PROJECT_CODE = \"5490\";\r\nconst OPEN_API_HEADERS: HeadersInit = {\r\n    \"x-whatap-pcode\": DEMO_PROJECT_CODE,\r\n    \"x-whatap-token\": DEMO_PROJECT_API_TOCKEN,\r\n};\r\n\r\nconst OPEN_API_ROOT = \"https://api.whatap.io/open/api\";\r\n\r\nexport const OPEN_API: OPEN_APIType = {\r\n    \"\": {\r\n        // 몇개 정해서 인포매틱스로?\r\n        act_agent: \"활성화 상태의 에이전트 수\",\r\n        inact_agent: \"비활성화 상태의 에이전트 수\",\r\n        host: \"호스트 수\",\r\n        cpucore: \"호스트의 CPU 코어 합\",\r\n\r\n        // 트랜잭션 관련\r\n        txcount: \"트랜잭션 수\",\r\n        tps: \"초당 트랜잭션 수\",\r\n        actx: \"액티브 트랜잭션 수\",\r\n\r\n        // 기타\r\n        user: \"5분간 집계된 고유 사용자 수\",\r\n        rtime: \"평균 응답 시간\",\r\n        cpu: \"CPU 사용률\",\r\n\r\n        // 쓰레드 풀 관련\r\n        threadpool_active: \"쓰레드풀 활성 쓰레드 수\",\r\n        threadpool_queue: \"쓰레드풀 큐잉 쓰레드 수\",\r\n\r\n        // DB 관련?\r\n        dbc_count: \"전체 DB Connection 수\",\r\n        dbc_active: \"활성(Active) DB Connection 수\",\r\n        dbc_idle: \"비활성(Idle) DB Connection 수\",\r\n\r\n        // Active 관련?\r\n        act_method: \"액티브 Method 수\",\r\n        act_sql: \"액티브 SQL 수\",\r\n        act_httpc: \"액티브 HTTP Call 수\",\r\n        act_dbc: \"액티브 DB Connection 수\",\r\n        act_socket: \"액티브 Socket 수\",\r\n    },\r\n\r\n    // 하나 정해서 라인차트로\r\n    json: {\r\n        \"exception/{stime}/{etime}\": \"Exception 발생\",\r\n        \"sql/{stime}/{etime}\": \"SQL\",\r\n        \"httpc/{stime}/{etime}\": \"HTTP 외부호출\",\r\n        \"remote/{stime}/{etime}\": \"client IP\",\r\n        \"transaction/{stime}/{etime}\": \"트랜잭션\",\r\n    },\r\n};\r\nconst getPath = (url: string, param: any = {}) => {\r\n    let path = url;\r\n    for (let key in param) {\r\n        path = path.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"g\"), param[key]);\r\n    }\r\n\r\n    return path;\r\n};\r\n\r\nconst getOpenApi = (type: string) => (key: string, param?: any) =>\r\n    new Promise((resolve, reject) => {\r\n        if (key in OPEN_API[type]) {\r\n            return resolve({\r\n                url: [OPEN_API_ROOT, type, key]\r\n                    .filter((path) => !!path)\r\n                    .join(\"/\"),\r\n                name: OPEN_API[type][key],\r\n            });\r\n        } else {\r\n            reject(\"잘못된 API 정보\");\r\n        }\r\n    }).then(({ url, name }: any) =>\r\n        fetch(getPath(url, param), {\r\n            headers: OPEN_API_HEADERS,\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data: DataType) => ({\r\n                key,\r\n                name,\r\n                data,\r\n            }))\r\n    );\r\n\r\nconst spot = getOpenApi(\"\");\r\nconst series = getOpenApi(\"json\");\r\n\r\nexport default { spot, series };\r\n","C:\\Users\\bzido\\frontend-test\\src\\store\\WidgetProvider.tsx",["169","170"],"import React, { createContext, useState, useCallback } from \"react\";\r\nimport useBoolean from \"../hook/useBoolean\";\r\nimport { WidgetPropsType } from \"../types/widget\";\r\n\r\nexport const WidgetStateContext = createContext(null);\r\nexport const WidgetSetterContext = createContext(null);\r\n\r\n// 위젯 차트타입/api 설정\r\nexport const WidgetPropsSettingModalStateContext = createContext(null);\r\nexport const WidgetPropsSettingModalSetterContext = createContext(null);\r\n\r\n// 호출 주기 설정\r\nexport const WidgetSettingModalStateContext = createContext(null);\r\nexport const WidgetSettingModalSetterContext = createContext(null);\r\n\r\ntype chartPropsKey =\r\n    | \"dataSource\"\r\n    | \"startDate\"\r\n    | \"endDate\"\r\n    | \"dif\"\r\n    | \"callCycle\";\r\n\r\ninterface ProviderPropsType {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst WidgetProvider = ({ children }: ProviderPropsType) => {\r\n    // 위젯\r\n    const [widgetProps, setWidgetProps] = useState<WidgetPropsType[]>([\r\n        {\r\n            widgetId: Math.random(),\r\n            chartType: \"LINE\",\r\n            apiKey: {\r\n                type: \"spot\",\r\n                keys: [\"cpu\"],\r\n            },\r\n        },\r\n    ]);\r\n    // 위젯 추가\r\n    // 위젯 삭제\r\n    // 위젯 수정\r\n\r\n    // 위젯 설정 모달(추가/수정)\r\n    // 위젯 차트타입/api 설정\r\n    const {\r\n        state: activeWidgetSettingModal,\r\n        setTrue,\r\n        setFalse,\r\n    } = useBoolean(false);\r\n\r\n    const [activeWidgetSettingModalValue, setActiveWidgetSettingModalValue] =\r\n        useState({\r\n            type: \"ADD\",\r\n            chartType: \"\",\r\n            apiKeys: {\r\n                type: \"spot\",\r\n                keys: [],\r\n            },\r\n            widgetId: 0,\r\n        });\r\n\r\n    const setTrueActiveWidgetSettingModal = useCallback(\r\n        (\r\n            type: string,\r\n            widgetId: number,\r\n            chartType: string = \"\",\r\n            apiKeys: any = {\r\n                type: \"spot\",\r\n                keys: [],\r\n            }\r\n        ) => {\r\n            setActiveWidgetSettingModalValue({\r\n                type,\r\n                chartType,\r\n                apiKeys,\r\n                widgetId,\r\n            });\r\n            setTrue();\r\n        },\r\n        []\r\n    );\r\n\r\n    const deleteWidgetProps = useCallback((widgetId: number) => {\r\n        setWidgetProps((widgetProps) =>\r\n            widgetProps.filter((filterItem) => filterItem.widgetId !== widgetId)\r\n        );\r\n    }, []);\r\n\r\n    // 호출 주기 설정\r\n    const {\r\n        state: activeWidgetModal,\r\n        setTrue: setTrueActiveWidgetModal,\r\n        setFalse: setFalseActiveWidgetModal,\r\n    } = useBoolean(false);\r\n\r\n    return (\r\n        <WidgetSetterContext.Provider value={{ setWidgetProps }}>\r\n            <WidgetStateContext.Provider value={{ widgetProps }}>\r\n                <WidgetPropsSettingModalStateContext.Provider\r\n                    value={{\r\n                        activeWidgetSettingModal,\r\n                        activeWidgetSettingModalValue,\r\n                    }}\r\n                >\r\n                    <WidgetPropsSettingModalSetterContext.Provider\r\n                        value={{\r\n                            setTrueActiveWidgetSettingModal,\r\n                            setFalse,\r\n                            deleteWidgetProps,\r\n                        }}\r\n                    >\r\n                        <WidgetSettingModalStateContext.Provider\r\n                            value={{ activeWidgetModal }}\r\n                        >\r\n                            <WidgetSettingModalSetterContext.Provider\r\n                                value={{\r\n                                    setTrueActiveWidgetModal,\r\n                                    setFalseActiveWidgetModal,\r\n                                }}\r\n                            >\r\n                                {children}\r\n                            </WidgetSettingModalSetterContext.Provider>\r\n                        </WidgetSettingModalStateContext.Provider>\r\n                    </WidgetPropsSettingModalSetterContext.Provider>\r\n                </WidgetPropsSettingModalStateContext.Provider>\r\n            </WidgetStateContext.Provider>\r\n        </WidgetSetterContext.Provider>\r\n    );\r\n};\r\n\r\nexport default WidgetProvider;\r\n","C:\\Users\\bzido\\frontend-test\\src\\component\\Widget\\WidgetChart.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\common\\widget.ts",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\WidgetPropsSettingModal.tsx",["171"],"import React, { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { Container, ListGroup, Modal, Row, Col, Button } from \"react-bootstrap\";\r\nimport { OPEN_API } from \"../../api\";\r\nimport {\r\n    WidgetPropsSettingModalSetterContext,\r\n    WidgetPropsSettingModalStateContext,\r\n    WidgetSetterContext,\r\n} from \"../../store/WidgetProvider\";\r\n\r\nconst chartTypeList = [\r\n    {\r\n        key: \"BAR\",\r\n        name: \"바 차트\",\r\n    },\r\n    {\r\n        key: \"LINE\",\r\n        name: \"라인 차트\",\r\n    },\r\n    {\r\n        key: \"INFO\",\r\n        name: \"인포매틱스 차트\",\r\n    },\r\n];\r\n\r\nconst WidgetPropsSettingModal = () => {\r\n    const {\r\n        activeWidgetSettingModal,\r\n        activeWidgetSettingModalValue: { type, chartType, apiKeys, widgetId },\r\n    } = useContext(WidgetPropsSettingModalStateContext);\r\n\r\n    const { setFalse } = useContext(WidgetPropsSettingModalSetterContext);\r\n\r\n    const { setWidgetProps } = useContext(WidgetSetterContext);\r\n    const useableApiList = useMemo(() => {\r\n        const array = [];\r\n\r\n        for (const key in OPEN_API[\"\"]) {\r\n            if (Object.prototype.hasOwnProperty.call(OPEN_API[\"\"], key)) {\r\n                const element = OPEN_API[\"\"][key];\r\n\r\n                array.push({ key: key, name: element });\r\n            }\r\n        }\r\n        return array;\r\n    }, [OPEN_API]);\r\n\r\n    const [selectedChartType, setSelectedChartType] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setSelectedChartType(chartType);\r\n    }, [chartType]);\r\n\r\n    const [selectedApiKeys, setSelectedApiKeys] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setSelectedApiKeys(apiKeys.keys);\r\n    }, [apiKeys]);\r\n\r\n    const onClickChartTypeList = (item: string) => {\r\n        setSelectedChartType(item);\r\n    };\r\n\r\n    const onClickApiKeyList = (item: string) => {\r\n        setSelectedApiKeys((selectedApiKeys: any) => {\r\n            const filterd = selectedApiKeys.filter(\r\n                (filterItem: any) => filterItem !== item\r\n            );\r\n\r\n            if (filterd.length === selectedApiKeys.length) {\r\n                return [...selectedApiKeys, item];\r\n            } else return filterd;\r\n        });\r\n    };\r\n    /*\r\n    위젯 추가\r\n    - api 리트스, 차트 리스트를 보여주고 선택해서 추가하도록 한다\r\n\r\n    위젯 삭제 -> 각 위젯에서 수행한다.\r\n    위젯 수정(api, chartType, 순서?) -> 각 위젯에서 수행한다.\r\n    */\r\n\r\n    const onClickConfirm = () => {\r\n        /*\r\n        type: ADD -> 추가\r\n        type: MODI -> 수정\r\n        */\r\n        switch (type) {\r\n            case \"ADD\":\r\n                if (window.confirm(\"추가하시겠습니까?\")) {\r\n                    setWidgetProps((widgetProps: any) => [\r\n                        ...widgetProps,\r\n                        {\r\n                            widgetId: Math.random(),\r\n                            chartType: selectedChartType,\r\n                            apiKey: {\r\n                                type: \"spot\",\r\n                                keys: selectedApiKeys,\r\n                            },\r\n                        },\r\n                    ]);\r\n                    setFalse();\r\n                }\r\n                break;\r\n            case \"MODI\":\r\n                if (window.confirm(\"수정하시겠습니까?\")) {\r\n                    setWidgetProps((widgetProps: any) =>\r\n                        widgetProps.map((mapItem: any) =>\r\n                            mapItem.widgetId === widgetId\r\n                                ? {\r\n                                      ...mapItem,\r\n                                      chartType: selectedChartType,\r\n                                      apiKey: {\r\n                                          ...mapItem.apiKey,\r\n                                          keys: selectedApiKeys,\r\n                                      },\r\n                                  }\r\n                                : mapItem\r\n                        )\r\n                    );\r\n                    setFalse();\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // 추가\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={activeWidgetSettingModal}\r\n                onHide={setFalse}\r\n                size={\"lg\"}\r\n            >\r\n                <div style={{ padding: \"20px\", boxSizing: \"border-box\" }}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col sm={4}>\r\n                                <h2>차트 선택</h2>\r\n                                <div\r\n                                    style={{\r\n                                        height: \"500px\",\r\n                                        overflowY: \"auto\",\r\n                                    }}\r\n                                >\r\n                                    <ListGroup>\r\n                                        {chartTypeList.map((item) => (\r\n                                            <ListGroup.Item\r\n                                                key={item.key}\r\n                                                action\r\n                                                active={\r\n                                                    item.key ===\r\n                                                    selectedChartType\r\n                                                }\r\n                                                onClick={() =>\r\n                                                    onClickChartTypeList(\r\n                                                        item.key\r\n                                                    )\r\n                                                }\r\n                                            >\r\n                                                {item.name}\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                </div>\r\n                            </Col>\r\n                            <Col sm={8}>\r\n                                <h2>데이터 선택</h2>\r\n                                <div\r\n                                    style={{\r\n                                        height: \"500px\",\r\n                                        overflowY: \"auto\",\r\n                                    }}\r\n                                >\r\n                                    <ListGroup>\r\n                                        {useableApiList.map((item) => (\r\n                                            <ListGroup.Item\r\n                                                key={item.key}\r\n                                                action\r\n                                                active={selectedApiKeys.some(\r\n                                                    (findItem: any) =>\r\n                                                        findItem === item.key\r\n                                                )}\r\n                                                onClick={() =>\r\n                                                    onClickApiKeyList(item.key)\r\n                                                }\r\n                                            >\r\n                                                {item.name}\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                <div>\r\n                    <Button onClick={setFalse}>취소</Button>\r\n                    <Button onClick={onClickConfirm}>확인</Button>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WidgetPropsSettingModal;\r\n","C:\\Users\\bzido\\frontend-test\\src\\hook\\Widget\\useWidgetButton.tsx",["172","173","174","175"],{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","severity":1,"message":"181","line":2,"column":10,"nodeType":"182","messageId":"183","endLine":2,"endColumn":16},{"ruleId":"180","severity":1,"message":"184","line":9,"column":10,"nodeType":"182","messageId":"183","endLine":9,"endColumn":46},{"ruleId":"180","severity":1,"message":"185","line":1,"column":8,"nodeType":"182","messageId":"183","endLine":1,"endColumn":13},{"ruleId":"176","replacedBy":"186"},{"ruleId":"178","replacedBy":"187"},{"ruleId":"180","severity":1,"message":"188","line":9,"column":10,"nodeType":"182","messageId":"183","endLine":9,"endColumn":30},{"ruleId":"176","replacedBy":"189"},{"ruleId":"178","replacedBy":"190"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"191","severity":1,"message":"192","line":115,"column":8,"nodeType":"193","endLine":115,"endColumn":20,"suggestions":"194"},{"ruleId":"191","severity":1,"message":"192","line":136,"column":8,"nodeType":"193","endLine":136,"endColumn":23,"suggestions":"195"},{"ruleId":"176","replacedBy":"196"},{"ruleId":"178","replacedBy":"197"},{"ruleId":"191","severity":1,"message":"198","line":18,"column":8,"nodeType":"193","endLine":18,"endColumn":13,"suggestions":"199"},{"ruleId":"176","replacedBy":"200"},{"ruleId":"178","replacedBy":"201"},{"ruleId":"176","replacedBy":"202"},{"ruleId":"178","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":92,"column":1,"nodeType":"206","endLine":92,"endColumn":33},{"ruleId":"180","severity":1,"message":"207","line":16,"column":6,"nodeType":"182","messageId":"183","endLine":16,"endColumn":19},{"ruleId":"191","severity":1,"message":"208","line":80,"column":9,"nodeType":"193","endLine":80,"endColumn":11,"suggestions":"209"},{"ruleId":"191","severity":1,"message":"210","line":45,"column":8,"nodeType":"193","endLine":45,"endColumn":18,"suggestions":"211"},{"ruleId":"180","severity":1,"message":"185","line":1,"column":8,"nodeType":"182","messageId":"183","endLine":1,"endColumn":13},{"ruleId":"191","severity":1,"message":"212","line":18,"column":8,"nodeType":"193","endLine":18,"endColumn":10,"suggestions":"213"},{"ruleId":"191","severity":1,"message":"214","line":22,"column":8,"nodeType":"193","endLine":22,"endColumn":37,"suggestions":"215"},{"ruleId":"191","severity":1,"message":"216","line":28,"column":8,"nodeType":"193","endLine":28,"endColumn":18,"suggestions":"217"},"no-native-reassign",["218"],"no-negated-in-lhs",["219"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'WidgetPropsSettingModalSetterContext' is defined but never used.","'React' is defined but never used.",["218"],["219"],"'WidgetModalPropsType' is defined but never used.",["218"],["219"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderChart'. Either include it or remove the dependency array.","ArrayExpression",["220"],["221"],["218"],["219"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["222"],["218"],["219"],["218"],["219"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'chartPropsKey' is defined but never used.","React Hook useCallback has a missing dependency: 'setTrue'. Either include it or remove the dependency array.",["223"],"React Hook useMemo has an unnecessary dependency: 'OPEN_API'. Either exclude it or remove the dependency array. Outer scope values like 'OPEN_API' aren't valid dependencies because mutating them doesn't re-render the component.",["224"],"React Hook useCallback has a missing dependency: 'setTrueActiveWidgetModal'. Either include it or remove the dependency array.",["225"],"React Hook useCallback has a missing dependency: 'setTrueActiveWidgetSettingModal'. Either include it or remove the dependency array.",["226"],"React Hook useCallback has a missing dependency: 'deleteWidgetProps'. Either include it or remove the dependency array.",["227"],"no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [dataSource, renderChart]",{"range":"244","text":"245"},"Update the dependencies array to be: [apiInfo, renderChart, size]",{"range":"246","text":"247"},"Update the dependencies array to be: [callback, ref]",{"range":"248","text":"249"},"Update the dependencies array to be: [setTrue]",{"range":"250","text":"251"},"Update the dependencies array to be: []",{"range":"252","text":"253"},"Update the dependencies array to be: [setTrueActiveWidgetModal]",{"range":"254","text":"255"},"Update the dependencies array to be: [setTrueActiveWidgetSettingModal, widgetId, chartType, apiKey]",{"range":"256","text":"257"},"Update the dependencies array to be: [deleteWidgetProps, widgetId]",{"range":"258","text":"259"},[3410,3422],"[dataSource, renderChart]",[3975,3990],"[apiInfo, renderChart, size]",[553,558],"[callback, ref]",[2138,2140],"[setTrue]",[1303,1313],"[]",[594,596],"[setTrueActiveWidgetModal]",[733,762],"[setTrueActiveWidgetSettingModal, widgetId, chartType, apiKey]",[919,929],"[deleteWidgetProps, widgetId]"]