[{"C:\\Users\\bzido\\frontend-test\\src\\index.js":"1","C:\\Users\\bzido\\frontend-test\\src\\App.tsx":"2","C:\\Users\\bzido\\frontend-test\\src\\api.js":"3","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js":"4","C:\\Users\\bzido\\frontend-test\\src\\component\\Widget.tsx":"5","C:\\Users\\bzido\\frontend-test\\src\\hook\\useResize.tsx":"6","C:\\Users\\bzido\\frontend-test\\src\\component\\Widget\\WidgetModal.tsx":"7","C:\\Users\\bzido\\frontend-test\\src\\page\\Dashboard.tsx":"8","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader.tsx":"9","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\DateBox.tsx":"10","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart\\InforMaticsBox.tsx":"11","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\BarChart.tsx":"12","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\LineChart.tsx":"13","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\RealTime.tsx":"14","C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart.tsx":"15","C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\CurrentTime.tsx":"16","C:\\Users\\bzido\\frontend-test\\src\\router\\Router.tsx":"17","C:\\Users\\bzido\\frontend-test\\src\\component\\common\\DatePicker\\ListPicker.tsx":"18","C:\\Users\\bzido\\frontend-test\\src\\common\\date.ts":"19"},{"size":1651,"mtime":1677763960063,"results":"20","hashOfConfig":"21"},{"size":3029,"mtime":1677589808365,"results":"22","hashOfConfig":"21"},{"size":2836,"mtime":1677665228482,"results":"23","hashOfConfig":"21"},{"size":375,"mtime":1676852251020,"results":"24","hashOfConfig":"21"},{"size":5909,"mtime":1677943876661,"results":"25","hashOfConfig":"21"},{"size":1051,"mtime":1677421584514,"results":"26","hashOfConfig":"21"},{"size":1354,"mtime":1677943880713,"results":"27","hashOfConfig":"21"},{"size":2454,"mtime":1677941362787,"results":"28","hashOfConfig":"21"},{"size":8197,"mtime":1677941070446,"results":"29","hashOfConfig":"21"},{"size":568,"mtime":1677644094228,"results":"30","hashOfConfig":"21"},{"size":673,"mtime":1677722297175,"results":"31","hashOfConfig":"21"},{"size":6860,"mtime":1677725903813,"results":"32","hashOfConfig":"21"},{"size":7549,"mtime":1677936651030,"results":"33","hashOfConfig":"21"},{"size":532,"mtime":1677764907820,"results":"34","hashOfConfig":"21"},{"size":748,"mtime":1677725912024,"results":"35","hashOfConfig":"21"},{"size":1024,"mtime":1677811199172,"results":"36","hashOfConfig":"21"},{"size":266,"mtime":1677584294462,"results":"37","hashOfConfig":"21"},{"size":1599,"mtime":1677940983332,"results":"38","hashOfConfig":"21"},{"size":836,"mtime":1677941561117,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"1grk8jl",{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bzido\\frontend-test\\src\\index.js",["89","90"],"import React, { createContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nexport const queue = [];\r\n\r\nexport const enqueueApi = (item) => {\r\n    queue.push(item);\r\n};\r\n\r\n// 전체 호출 일시 정지\r\nlet stop = false;\r\n\r\nexport const setStop = (value) => {\r\n    stop = value;\r\n};\r\n\r\nlet isWorking = false;\r\n\r\n// 체크: 0.1초 단위\r\n// 0.01초 단위로 하면 에러 발생\r\n// 이전 호출이 종료되고 호출 되어야 함.\r\nconst apiManager = () => {\r\n    setInterval(async () => {\r\n        if (queue.length > 0 && isWorking === false) {\r\n            try {\r\n                isWorking = true;\r\n                const result = await queue[0].callApi();\r\n                queue[0].success(result);\r\n            } catch (e) {\r\n                console.log(e);\r\n                console.log(\"에러 발생\", queue);\r\n                if (queue.length > 0) {\r\n                    queue[0].fail();\r\n                }\r\n            } finally {\r\n                isWorking = false;\r\n                queue.shift();\r\n            }\r\n        }\r\n    }, 10);\r\n};\r\n\r\napiManager();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","C:\\Users\\bzido\\frontend-test\\src\\App.tsx",["91","92","93","94"],"import styled from \"styled-components\";\r\nimport Router from \"./router/Router\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nfunction App() {\r\n    // const [actAgent, setActAgent] = useState<any>();\r\n    // const [httpcSeries, setHttpcSeries] = useState<any>();\r\n\r\n    // useEffect(() => {\r\n    //     // api.spot('act_agent').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('inact_agent').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('host').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('cpucore').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('txcount').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('tps').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('actx').then((result) => {console.log(result); setActAgent(result)})\r\n    //     api.spot(\"rtime\").then((result) => {\r\n    //         console.log(result);\r\n    //         setActAgent(result);\r\n    //     });\r\n    //     // api.spot('cpu').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('threadpool_active').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('threadpool_queue').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_count').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_active').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_idle').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('act_method').then((result) => {console.log(result); setActAgent(result)})\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <Router />\r\n            {/* <TestArea>\r\n                <TestRow>\r\n                    <TestCol className=\"width10\">\r\n                        <InformaticsChart />\r\n                    </TestCol>\r\n                    <TestCol className=\"width40\">\r\n                        <Widget {...barChartProps} />\r\n                    </TestCol>\r\n                    <TestCol className=\"width50\">\r\n                        <LineChart />\r\n                    </TestCol>\r\n                </TestRow>\r\n            </TestArea> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst TestArea = styled.div`\r\n    width: 100%;\r\n    border: 1px solid;\r\n    box-sizing: border-box;\r\n\r\n    min-width: 1024px;\r\n`;\r\n\r\nconst TestRow = styled.div`\r\n    width: 100%;\r\n    height: 400px;\r\n    display: flex;\r\n    gap: 10px;\r\n    padding: 10px;\r\n    box-sizing: border-box;\r\n\r\n    .width10 {\r\n        width: 10%;\r\n    }\r\n\r\n    .width40 {\r\n        width: 40%;\r\n    }\r\n\r\n    .width50 {\r\n        width: 50%;\r\n    }\r\n`;\r\nconst TestCol = styled.div`\r\n    height: 100%;\r\n    padding: 5px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst Box = styled.div``;\r\n\r\nexport default App;\r\n",["95","96"],"C:\\Users\\bzido\\frontend-test\\src\\api.js",["97"],"const DEMO_PROJECT_API_TOCKEN = \"XGJHUSQZTI2AVIENWA27HI5V\";\r\nconst DEMO_PROJECT_CODE = 5490;\r\nconst OPEN_API_HEADERS = {\r\n    \"x-whatap-pcode\": DEMO_PROJECT_CODE,\r\n    \"x-whatap-token\": DEMO_PROJECT_API_TOCKEN,\r\n};\r\n\r\nconst OPEN_API_ROOT = \"https://api.whatap.io/open/api\";\r\n\r\nexport const OPEN_API = {\r\n    \"\": {\r\n        // 몇개 정해서 인포매틱스로?\r\n        act_agent: \"활성화 상태의 에이전트 수\",\r\n        inact_agent: \"비활성화 상태의 에이전트 수\",\r\n        host: \"호스트 수\",\r\n        cpucore: \"호스트의 CPU 코어 합\",\r\n\r\n        // 트랜잭션 관련\r\n        txcount: \"트랜잭션 수\",\r\n        tps: \"초당 트랜잭션 수\",\r\n        actx: \"액티브 트랜잭션 수\",\r\n\r\n        // 기타\r\n        user: \"5분간 집계된 고유 사용자 수\",\r\n        rtime: \"평균 응답 시간\",\r\n        cpu: \"CPU 사용률\",\r\n\r\n        // 쓰레드 풀 관련\r\n        threadpool_active: \"쓰레드풀 활성 쓰레드 수\",\r\n        threadpool_queue: \"쓰레드풀 큐잉 쓰레드 수\",\r\n\r\n        // DB 관련?\r\n        dbc_count: \"전체 DB Connection 수\",\r\n        dbc_active: \"활성(Active) DB Connection 수\",\r\n        dbc_idle: \"비활성(Idle) DB Connection 수\",\r\n\r\n        // Active 관련?\r\n        act_method: \"액티브 Method 수\",\r\n        act_sql: \"액티브 SQL 수\",\r\n        act_httpc: \"액티브 HTTP Call 수\",\r\n        act_dbc: \"액티브 DB Connection 수\",\r\n        act_socket: \"액티브 Socket 수\",\r\n    },\r\n\r\n    // 하나 정해서 라인차트로\r\n    json: {\r\n        \"exception/{stime}/{etime}\": \"Exception 발생\",\r\n        \"sql/{stime}/{etime}\": \"SQL\",\r\n        \"httpc/{stime}/{etime}\": \"HTTP 외부호출\",\r\n        \"remote/{stime}/{etime}\": \"client IP\",\r\n        \"transaction/{stime}/{etime}\": \"트랜잭션\",\r\n    },\r\n};\r\nconst getPath = (url, param = {}) => {\r\n    let path = url;\r\n    for (let key in param) {\r\n        path = path.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"g\"), param[key]);\r\n    }\r\n\r\n    return path;\r\n};\r\n\r\nconst getOpenApi = (type) => (key, param) =>\r\n    new Promise((resolve, reject) => {\r\n        if (key in OPEN_API[type]) {\r\n            return resolve({\r\n                url: [OPEN_API_ROOT, type, key]\r\n                    .filter((path) => !!path)\r\n                    .join(\"/\"),\r\n                name: OPEN_API[type][key],\r\n            });\r\n        } else {\r\n            reject(\"잘못된 API 정보\");\r\n        }\r\n    }).then(({ url, name }) =>\r\n        fetch(getPath(url, param), {\r\n            headers: OPEN_API_HEADERS,\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => ({\r\n                key,\r\n                name,\r\n                data,\r\n            }))\r\n    );\r\n\r\nconst spot = getOpenApi(\"\");\r\nconst series = getOpenApi(\"json\");\r\n\r\nexport default { spot, series };\r\n",["98","99"],"C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js",[],["100","101"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Widget.tsx",["102"],"import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport { enqueueApi } from \"..\";\r\nimport api, { OPEN_API } from \"../api\";\r\nimport { getDateRange, parseDate } from \"../common/date\";\r\nimport { DataType, OPEN_APIType } from \"../types/api\";\r\nimport { dateType, WidgetPropsType } from \"../types/widget\";\r\nimport BarChart from \"./chart/BarChart\";\r\nimport InformaticsChart from \"./chart/InformaticsChart\";\r\nimport LineChart from \"./chart/LineChart\";\r\nimport WidgetModal from \"./Widget/WidgetModal\";\r\n\r\n// Default 호출 주기 : 5 초\r\nexport const DEFAULT_CALL_CYCLE = 5;\r\n\r\nconst OPEN_API_WITH_TYPE: OPEN_APIType = OPEN_API;\r\n\r\nconst Widget = ({ chartType, apiKey, callApiObject }: WidgetPropsType) => {\r\n    // api 를 마지막으로 호출한 시간\r\n    const [lastCallTime, setLastCallTime] = useState(null);\r\n\r\n    const [isShowSettingModal, setIsShowSettingModal] = useState(false);\r\n\r\n    // 호출 주기\r\n    const callCycleRef = useRef(DEFAULT_CALL_CYCLE);\r\n\r\n    const [callCycle, setCallCycle] = useState(DEFAULT_CALL_CYCLE);\r\n\r\n    // 데이터\r\n    const [dataSource, setDataSource] = useState(\r\n        apiKey.keys.map((item: string) => ({\r\n            key: item,\r\n            data: null,\r\n            name:\r\n                apiKey.type === \"spot\"\r\n                    ? OPEN_API_WITH_TYPE[\"\"][item]\r\n                    : OPEN_API_WITH_TYPE[\"json\"][item],\r\n        }))\r\n    );\r\n\r\n    const apiObj = (key: string) => {\r\n        return {\r\n            callApi: () => api.spot(key),\r\n            success: (data: DataType) => {\r\n                setDataSource((prev) =>\r\n                    prev.map((item) => (item.key === key ? data : item))\r\n                );\r\n            },\r\n            fail: () => console.warn(\"api 호출에 실패했습니다.\"),\r\n        };\r\n    };\r\n\r\n    const onClickShowSetting = () => {\r\n        setIsShowSettingModal(true);\r\n    };\r\n\r\n    // 라인차트 axis 생성용\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [dif, setDif] = useState(600); // 구간 차이 (초단위)\r\n\r\n    // 호출할 api 등록\r\n    const interval = useRef(null);\r\n\r\n    const intervalCallback = useCallback(\r\n        (startDate: number, endDate: number) => {\r\n            const { keys } = apiKey;\r\n\r\n            // 조회 시작, 종료 시간 설정\r\n\r\n            setStartDate(new Date(startDate));\r\n            setEndDate(new Date(endDate));\r\n\r\n            // 조회 간격 설정\r\n            setDif((endDate - startDate) / 1000);\r\n\r\n            // 호출  api 등록\r\n            keys.forEach((apiItem) => {\r\n                enqueueApi(apiObj(apiItem));\r\n            });\r\n\r\n            // 마지막 조회 시간 설정 (api를 호출했던 실제 시간)\r\n            setLastCallTime(new Date(Date.now()));\r\n        },\r\n        [apiKey]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const { status, pastBody, nowBody } = callApiObject;\r\n\r\n        switch (status) {\r\n            case \"NOW\":\r\n                clearInterval(interval.current);\r\n                // 조회 시작, 종료 시간 설정\r\n                const { startDate, endDate } = getDateRange(nowBody.range);\r\n\r\n                intervalCallback(startDate, endDate);\r\n\r\n                interval.current = setInterval(() => {\r\n                    const { startDate, endDate } = getDateRange(nowBody.range);\r\n\r\n                    intervalCallback(startDate, endDate);\r\n                }, callCycleRef.current * 1000);\r\n                break;\r\n            case \"PAST\":\r\n                if (Object.keys(pastBody).length < 1) break;\r\n\r\n                intervalCallback(\r\n                    parseDate(pastBody.startDate),\r\n                    parseDate(pastBody.endDate)\r\n                );\r\n\r\n                break;\r\n            case \"STOP\":\r\n                clearInterval(interval.current);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }, [callApiObject, intervalCallback]);\r\n\r\n    // 호출 주기 변경\r\n    const onClickApplyCallCycle = (inputValue: number) => {\r\n        if (window.confirm(\"호출 주기를 변경하시겠습니까?\")) {\r\n            callCycleRef.current = inputValue;\r\n\r\n            setCallCycle(inputValue);\r\n\r\n            // 기존 호출 interval 제거\r\n            clearInterval(interval.current);\r\n\r\n            // 주기 변경후 재 등록\r\n            interval.current = setInterval(() => {\r\n                const { startDate, endDate } = getDateRange(\r\n                    callApiObject.nowBody.range\r\n                );\r\n\r\n                intervalCallback(startDate, endDate);\r\n            }, callCycleRef.current * 1000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <WidgetBlock>\r\n            <Button\r\n                onClick={onClickShowSetting}\r\n                disabled={callApiObject.status === \"PAST\"}\r\n            >\r\n                showSetting\r\n            </Button>\r\n\r\n            {/* 차트 */}\r\n            {chartType === \"BAR\" && <BarChart dataSource={dataSource} />}\r\n            {chartType === \"LINE\" && (\r\n                <LineChart\r\n                    dataSource={dataSource}\r\n                    startDate={startDate}\r\n                    endDate={endDate}\r\n                    dif={dif}\r\n                    callCycle={callCycle}\r\n                />\r\n            )}\r\n            {chartType === \"INFO\" && (\r\n                <InformaticsChart dataSource={dataSource} />\r\n            )}\r\n\r\n            {/* 모달 */}\r\n            <WidgetModal\r\n                show={isShowSettingModal}\r\n                setShow={setIsShowSettingModal}\r\n                lastCallTime={lastCallTime}\r\n                onClickApplyCallCycle={onClickApplyCallCycle}\r\n            />\r\n        </WidgetBlock>\r\n    );\r\n};\r\n\r\nconst WidgetBlock = styled.div``;\r\n\r\nexport default Widget;\r\n","C:\\Users\\bzido\\frontend-test\\src\\hook\\useResize.tsx",["103"],"import React, { RefObject, useState, useEffect } from \"react\";\r\nimport debounce from \"lodash/debounce\";\r\n\r\nconst useResize = (ref: RefObject<HTMLDivElement>) => {\r\n    const [state, setState] = useState({ width: 0, height: 0 });\r\n\r\n    useEffect(() => {\r\n        /*\r\n        resize 마다 이벤트를 발생시켜 svg를 매번 다시 그리면 요구되는 작업량이 많기 때문에\r\n        debounce로 과도한 요청을 방지한다.\r\n\r\n        디바운스 단위시간: 0.3초\r\n        */\r\n        const getSize = debounce(() => {\r\n            if (!ref || !ref.current) {\r\n                return;\r\n            }\r\n            const width = ref.current.offsetWidth;\r\n            const height = ref.current.offsetHeight;\r\n            setState({\r\n                width,\r\n                height,\r\n            });\r\n        }, 300);\r\n\r\n        window.addEventListener(\"resize\", getSize);\r\n        getSize();\r\n        return () => window.removeEventListener(\"resize\", getSize);\r\n    }, [ref]);\r\n    return state;\r\n};\r\n\r\nexport default useResize;\r\n",["104","105"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Widget\\WidgetModal.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\page\\Dashboard.tsx",["106"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader.tsx",["107","108","109","110"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\DateBox.tsx",[],["111","112"],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart\\InforMaticsBox.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\BarChart.tsx",[],["113","114"],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\LineChart.tsx",["115","116","117"],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\RealTime.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\chart\\InformaticsChart.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\Dashboard\\DashboardHeader\\CurrentTime.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\router\\Router.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\component\\common\\DatePicker\\ListPicker.tsx",[],"C:\\Users\\bzido\\frontend-test\\src\\common\\date.ts",[],{"ruleId":"118","severity":1,"message":"119","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":30},{"ruleId":"118","severity":1,"message":"122","line":18,"column":5,"nodeType":"120","messageId":"121","endLine":18,"endColumn":9},{"ruleId":"123","severity":1,"message":"124","line":49,"column":7,"nodeType":"120","messageId":"121","endLine":49,"endColumn":15},{"ruleId":"123","severity":1,"message":"125","line":57,"column":7,"nodeType":"120","messageId":"121","endLine":57,"endColumn":14},{"ruleId":"123","severity":1,"message":"126","line":77,"column":7,"nodeType":"120","messageId":"121","endLine":77,"endColumn":14},{"ruleId":"123","severity":1,"message":"127","line":83,"column":7,"nodeType":"120","messageId":"121","endLine":83,"endColumn":10},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":90,"column":1,"nodeType":"134","endLine":90,"endColumn":33},{"ruleId":"128","replacedBy":"135"},{"ruleId":"130","replacedBy":"136"},{"ruleId":"128","replacedBy":"137"},{"ruleId":"130","replacedBy":"138"},{"ruleId":"123","severity":1,"message":"139","line":8,"column":10,"nodeType":"120","messageId":"121","endLine":8,"endColumn":18},{"ruleId":"123","severity":1,"message":"140","line":1,"column":8,"nodeType":"120","messageId":"121","endLine":1,"endColumn":13},{"ruleId":"128","replacedBy":"141"},{"ruleId":"130","replacedBy":"142"},{"ruleId":"123","severity":1,"message":"143","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":19},{"ruleId":"123","severity":1,"message":"144","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":28},{"ruleId":"123","severity":1,"message":"143","line":1,"column":30,"nodeType":"120","messageId":"121","endLine":1,"endColumn":39},{"ruleId":"123","severity":1,"message":"145","line":1,"column":41,"nodeType":"120","messageId":"121","endLine":1,"endColumn":47},{"ruleId":"123","severity":1,"message":"146","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":17},{"ruleId":"128","replacedBy":"137"},{"ruleId":"130","replacedBy":"138"},{"ruleId":"128","replacedBy":"147"},{"ruleId":"130","replacedBy":"148"},{"ruleId":"123","severity":1,"message":"149","line":13,"column":26,"nodeType":"120","messageId":"121","endLine":13,"endColumn":44},{"ruleId":"150","severity":1,"message":"151","line":219,"column":8,"nodeType":"152","endLine":219,"endColumn":14,"suggestions":"153"},{"ruleId":"150","severity":1,"message":"154","line":223,"column":8,"nodeType":"152","endLine":223,"endColumn":44,"suggestions":"155"},"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'stop' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'TestArea' is assigned a value but never used.","'TestRow' is assigned a value but never used.","'TestCol' is assigned a value but never used.","'Box' is assigned a value but never used.","no-native-reassign",["156"],"no-negated-in-lhs",["157"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["156"],["157"],["156"],["157"],"'dateType' is defined but never used.","'React' is defined but never used.",["156"],["157"],"'useEffect' is defined but never used.","'useCallback' is defined but never used.","'useRef' is defined but never used.","'setStop' is defined but never used.",["156"],["157"],"'LineChartPropsType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'draw2'. Either include it or remove the dependency array.","ArrayExpression",["158"],"React Hook useEffect has a missing dependency: 'update'. Either include it or remove the dependency array.",["159"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [draw2, size]",{"range":"164","text":"165"},"Update the dependencies array to be: [startDate, endDate, dif, callCycle, update]",{"range":"166","text":"167"},[5795,5801],"[draw2, size]",[5856,5892],"[startDate, endDate, dif, callCycle, update]"]