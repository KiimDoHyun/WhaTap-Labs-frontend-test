[{"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx":"1","C:\\Users\\bzido\\frontend-test\\src\\index.js":"2","C:\\Users\\bzido\\frontend-test\\src\\App.tsx":"3","C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart2.tsx":"4","C:\\Users\\bzido\\frontend-test\\src\\api.js":"5","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js":"6"},{"size":6380,"mtime":1677206713420,"results":"7","hashOfConfig":"8"},{"size":1239,"mtime":1677119962215,"results":"9","hashOfConfig":"8"},{"size":7368,"mtime":1677159058009,"results":"10","hashOfConfig":"8"},{"size":10384,"mtime":1677328108105,"results":"11","hashOfConfig":"8"},{"size":2502,"mtime":1676886050945,"results":"12","hashOfConfig":"8"},{"size":375,"mtime":1676852251020,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1grk8jl",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart1.tsx",["34","35","36","37","38"],"import {\r\n    axisBottom,\r\n    axisLeft,\r\n    axisTop,\r\n    line,\r\n    max,\r\n    scaleBand,\r\n    scaleLinear,\r\n    select,\r\n} from \"d3\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { arr } from \"..\";\r\nimport api from \"../api\";\r\n\r\nconst TestChart1 = () => {\r\n    const svgRef = useRef(null);\r\n    const [data, setData] = useState([\r\n        {\r\n            name: \"act_method\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_sql\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_httpc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_dbc\",\r\n            value: 0,\r\n        },\r\n        {\r\n            name: \"act_socket\",\r\n            value: 0,\r\n        },\r\n    ]);\r\n\r\n    // 조회 에러 발생: 갱신 X\r\n    // api 호출 생성 함수\r\n    const apiObj = (type: string) => {\r\n        return {\r\n            callApi: () => api.spot(type),\r\n            success: (newValue: any) =>\r\n                setData((prevState) => {\r\n                    const newData = prevState.map((item) =>\r\n                        item.name === type ? { ...item, value: newValue } : item\r\n                    );\r\n                    updateChart(newData);\r\n\r\n                    return newData;\r\n                }),\r\n            fail: () => console.warn(\"api 호출에 실패했습니다.\"),\r\n        };\r\n    };\r\n\r\n    /*\r\n    값 중복이 있는 경우 어떻게 고유하게 값을 지정할지\r\n\r\n    12\r\n    7\r\n    7\r\n    4\r\n\r\n    -> 7 값이 서로다른 2개가 아닌 한개의 막대차트만 그림\r\n    */\r\n    const updateChart = (newData: any) => {\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(newData.map((item: any) => String(item.name)))\r\n            .range([20, 480]);\r\n\r\n        const yMax = max(newData, function (d: any) {\r\n            return d.value;\r\n        });\r\n\r\n        const yScale = scaleLinear()\r\n            .domain([0, Number(yMax)])\r\n            .range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        svg.selectAll(\".bar\")\r\n            .data(newData)\r\n            // css: trasition: 500 과 동일함\r\n            .transition()\r\n            .duration(500)\r\n            // 모든 데이터가 변경되는 경우 딜레이를 추가할 수 있음.\r\n            // .delay((d: any, i: any) => i * 100)\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                return yScale(d.value) - 70;\r\n                // return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }); // x 위치는 해당 값의 x축의 위치로\r\n\r\n        svg.selectAll(\".text\")\r\n            .data(newData)\r\n            .transition()\r\n            .duration(500)\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            });\r\n    };\r\n\r\n    // 필요데이터 조회: act (액티브 스테이터스)\r\n    // 최대값 기준\r\n    useEffect(() => {\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_method\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_sql\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_httpc\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_dbc\"));\r\n        // }, 5000);\r\n        // setInterval(() => {\r\n        //     arr.push(apiObj(\"act_socket\"));\r\n        // }, 5000);\r\n\r\n        // 막대 차트\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(data.map((item) => `${item.name}`))\r\n            .range([20, 480]);\r\n\r\n        const xAxis = axisLeft(xScale).ticks(4);\r\n        svg.select(\".x-axis\")\r\n            // .style(\"transform\", \"translateY(450px)\")\r\n            .attr(\"transform\", \"translate(70, 0)\")\r\n            .call(xAxis);\r\n\r\n        const yScale = scaleLinear().domain([0, 10]).range([70, 480]);\r\n\r\n        const yAxis = axisTop(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"transform\", \"translate(0, 20)\")\r\n            .attr(\"opacity\", 0)\r\n            .call(yAxis);\r\n\r\n        // 텍스트 추가해보기\r\n\r\n        let bar = svg\r\n            .selectAll(\".item\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"item\");\r\n\r\n        bar.append(\"rect\")\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"width\", function (d: any, i: any) {\r\n                return d.value;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"height\", 25) // 너비는 25로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 37;\r\n            }) // x 위치는 해당 값의 x축의 위치로\r\n            .attr(\"x\", function (d: any, i: any) {\r\n                return 70;\r\n            }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n\r\n        bar.append(\"text\")\r\n            .attr(\"class\", \"text\")\r\n            .text(function (d: any) {\r\n                return d.value;\r\n            })\r\n            .attr(\"fill\", \"#919191\")\r\n            .attr(\"x\", 80)\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return xScale(d.name) + 54;\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                액티브 스테이터스 <div className=\"infoIcon\"></div>\r\n            </div>\r\n            <div style={{ height: \"500px\", width: \"500px\" }}>\r\n                <svg ref={svgRef} style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <g className=\"y-axis\" />\r\n                    <g className=\"x-axis\" />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestChart1;\r\n",["39","40"],"C:\\Users\\bzido\\frontend-test\\src\\index.js",["41"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nexport const arr = [];\r\n\r\nlet isWorking = false;\r\n\r\n// 체크: 0.1초 단위\r\n// 0.01초 단위로 하면 에러 발생\r\n// 이전 호출이 종료되고 호출 되어야 함.\r\nconst apiManager = () => {\r\n    setInterval(async () => {\r\n        if (arr.length > 0) {\r\n            try {\r\n                const result = await arr[0].callApi();\r\n                arr[0].success(result.data);\r\n            } catch (e) {\r\n                console.log(e);\r\n                console.log(\"에러 발생\", arr);\r\n                if (arr.length > 0) {\r\n                    arr[0].fail();\r\n                }\r\n            } finally {\r\n                arr.shift();\r\n            }\r\n        }\r\n    }, 100);\r\n};\r\n\r\napiManager();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["42","43"],"C:\\Users\\bzido\\frontend-test\\src\\App.tsx",["44","45","46","47","48"],"import {\r\n    axisBottom,\r\n    axisLeft,\r\n    axisRight,\r\n    scaleBand,\r\n    scaleLinear,\r\n    select,\r\n} from \"d3\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport api from \"./api\";\r\nimport TestChart1 from \"./component/TestChart1\";\r\nimport TestChart2 from \"./component/TestChart2\";\r\nconst HOUR = 1000 * 60 * 60;\r\n\r\nfunction App() {\r\n    // const [actAgent, setActAgent] = useState<any>();\r\n    // const [httpcSeries, setHttpcSeries] = useState<any>();\r\n\r\n    // useEffect(() => {\r\n    //     // api.spot('act_agent').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('inact_agent').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('host').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('cpucore').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('txcount').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('tps').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('actx').then((result) => {console.log(result); setActAgent(result)})\r\n    //     api.spot(\"rtime\").then((result) => {\r\n    //         console.log(result);\r\n    //         setActAgent(result);\r\n    //     });\r\n    //     // api.spot('cpu').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('threadpool_active').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('threadpool_queue').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_count').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_active').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('dbc_idle').then((result) => {console.log(result); setActAgent(result)})\r\n    //     // api.spot('act_method').then((result) => {console.log(result); setActAgent(result)})\r\n\r\n    /*\r\n    현재시간 기준 5초 동안의 데이터 조회 테스트\r\n\r\n    transaction: 데이터 없음\r\n\r\n    */\r\n\r\n    // }, []);\r\n\r\n    const svgRef = useRef(null);\r\n\r\n    const [data, setData] = useState([\r\n        { x: \"A\", y: 9 },\r\n        { x: \"B\", y: 19 },\r\n        { x: \"C\", y: 29 },\r\n        { x: \"D\", y: 39 },\r\n        { x: \"E\", y: 29 },\r\n    ]);\r\n\r\n    // const onClick = () => {\r\n    //     const rand_0_1 = Math.floor(Math.random() * 2);\r\n\r\n    //     const newData = data.map((item) => ({\r\n    //         ...item,\r\n    //         y: rand_0_1 === 0 ? (item.y += 10) : (item.y -= 10),\r\n    //     }));\r\n\r\n    //     setData(newData);\r\n    //     const svg: any = select(svgRef.current);\r\n\r\n    //     const xScale = scaleBand() // x 축\r\n    //         .domain(newData.map((item) => item.x))\r\n    //         .range([50, 450]);\r\n    //     // .padding(0.5);\r\n\r\n    //     svg.selectAll(\".bar\")\r\n    //         .data(newData)\r\n    //         // css: trasition: 500 과 동일함\r\n    //         .transition()\r\n    //         // .duration(500)\r\n    //         // 모든 데이터가 변경되는 경우 딜레이를 추가할 수 있음.\r\n    //         .delay((d: any, i: any) => i * 100)\r\n    //         .attr(\"class\", \"bar\")\r\n    //         // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n    //         .attr(\"height\", function (d: any, i: any) {\r\n    //             return d.y * 5;\r\n    //         }) // 높이는 각 값의 *5 만큼 크기로\r\n    //         .attr(\"width\", 25) // 너비는 25로\r\n    //         .attr(\"x\", function (d: any, i: string) {\r\n    //             return xScale(d.x) + 25;\r\n    //         }) // x 위치는 해당 값의 x축의 위치로\r\n    //         .attr(\"y\", function (d: any, i: any) {\r\n    //             return 450 - d.y * 5;\r\n    //         }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n    // };\r\n\r\n    useEffect(() => {\r\n        // 조회 가능한 최소 시간 범위가 5분?\r\n        /*\r\n        시각화 데이터\r\n        time_avg\r\n        time_max\r\n        time_min\r\n        time_std\r\n        time_sum\r\n         */\r\n\r\n        // bar 차트 생성\r\n        const svg: any = select(svgRef.current);\r\n\r\n        const xScale = scaleBand() // x 축\r\n            .domain(data.map((item) => item.x))\r\n            .range([50, 450]);\r\n        // .padding(0.5);\r\n\r\n        const yScale = scaleLinear() // y 축\r\n            .domain([0, 200]) // 실제값의 범위, // 최대값 찾아서 범위 지정?\r\n            .range([450, 50]); // 차트를 그리기 위해 크기를 지정.\r\n\r\n        const xAxis = axisBottom(xScale).ticks(4);\r\n        svg.select(\".x-axis\")\r\n            .style(\"transform\", \"translateY(450px)\")\r\n            .call(xAxis);\r\n\r\n        const yAxis = axisLeft(yScale);\r\n        svg.select(\".y-axis\")\r\n            .attr(\"height\", \"100%\")\r\n            .attr(\"transform\", \"translate(50, 0)\")\r\n            .call(yAxis);\r\n\r\n        // 데이터 수정 관련 transition, duration을 여기에 추가하면 작동하지 않음.\r\n        // 외부 이벤트에서 조작해야 한다?\r\n\r\n        svg.selectAll(\".bar\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"rect\")\r\n            // 작동 X\r\n            // .transition()\r\n            // .duration(500)\r\n            .attr(\"class\", \"bar\")\r\n            // 첫번째 인자에 배열의 요소가, 두번째 인자에 인덱스가 들어있음.\r\n            .attr(\"height\", function (d: any, i: any) {\r\n                return d.y * 5;\r\n            }) // 높이는 각 값의 *5 만큼 크기로\r\n            .attr(\"width\", 25) // 너비는 25로\r\n            .attr(\"x\", function (d: any, i: string) {\r\n                return xScale(d.x) + 25;\r\n            }) // x 위치는 해당 값의 x축의 위치로\r\n            .attr(\"y\", function (d: any, i: any) {\r\n                return 450 - d.y * 5;\r\n            }); // y 는 원래 높이에서 해당 높이를 뺀 만큼\r\n    }, [data]);\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            {/* 인포메틱스 4개 */}\r\n\r\n            {/* d3로 제작 */}\r\n            {/* 바 차트1 - 트랜잭션 관련 3개 */}\r\n            {/* 바 차트2 - 쓰레드 풀 관련 2개 */}\r\n            {/* json 하나 정해서 라인 \r\n      x: 호출 시간\r\n      y: 호출 값 전부\r\n      */}\r\n            <TestChart1 />\r\n            <TestChart2 />\r\n            <div style={{ height: \"500px\", width: \"500px\" }}>\r\n                <svg ref={svgRef} style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <g className=\"y-axis\" />\r\n                    <g className=\"x-axis\" />\r\n                </svg>\r\n            </div>\r\n            {/* <button onClick={onClick}>데이터 변경</button> */}\r\n\r\n            <h1>Open API (Application)</h1>\r\n            <a\r\n                href=\"https://docs.whatap.io/kr/appendix/open_api_application.pdf\"\r\n                target=\"_blank\"\r\n            >\r\n                가이드 문서\r\n            </a>\r\n            <h2>프로젝트 API 예시</h2>\r\n            <h3>Spot 정보 조회 URL</h3>\r\n            {/* <pre>{JSON.stringify(actAgent, null, 4)}</pre> */}\r\n            <hr />\r\n            <h3>통계 정보 조회 URL</h3>\r\n            {/* <pre>{JSON.stringify(httpcSeries, null, 4)}</pre> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n",["49","50"],"C:\\Users\\bzido\\frontend-test\\src\\component\\TestChart2.tsx",["51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66"],"import {\r\n    active,\r\n    axisBottom,\r\n    axisLeft,\r\n    curveMonotoneX,\r\n    easeLinear,\r\n    line,\r\n    max,\r\n    randomNormal,\r\n    randomUniform,\r\n    range,\r\n    scaleLinear,\r\n    scaleTime,\r\n    select,\r\n    timeParse,\r\n} from \"d3\";\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport api from \"../api\";\r\n\r\nconst n = 600;\r\nconst duration = 750;\r\nconst now: any = new Date(Date.now() - duration);\r\nconst count = 0;\r\nconst data = range(n).map(function () {\r\n    return 0.5;\r\n});\r\n\r\n/*\r\n라인 위치 조정 V\r\n조회된 데이터 바인딩 \r\nx축 tick: 1분 단위로 조정 \r\n*/\r\n\r\nconst margin = { top: 20, right: 20, bottom: 20, left: 40 };\r\n\r\nconst TestChart2 = () => {\r\n    const svgRef = useRef(null);\r\n\r\n    const draw1 = () => {\r\n        const svg: any = select(svgRef.current);\r\n\r\n        let n = 100;\r\n\r\n        // Max값의 기준?\r\n        // x 축 시간 범위로 변경\r\n        // 조회 데이터엔 시간값이 없음\r\n        // 범위 시간만 알 수 있음.\r\n        // 시작, 종료 시간에서 5초 단위로 끊어서 데이터를 조합?\r\n\r\n        // let xScale = scaleLinear()\r\n        //     // .domain([\r\n        //     //     new Date(Date.now() - 1000 * 60 * 10),\r\n        //     //     new Date(Date.now()),\r\n        //     // ])\r\n        //     .domain(aa)\r\n        //     .range([50, 450]);\r\n\r\n        //\r\n\r\n        // 시간축\r\n        let xScale = scaleLinear().domain([0, n]).range([50, 450]);\r\n\r\n        let yScale = scaleLinear().domain([0, 1]).range([450, 50]);\r\n\r\n        let myLine = line()\r\n            .x(function (d, i) {\r\n                return xScale(i);\r\n            })\r\n            .y(function (d: any, i) {\r\n                return yScale(d.y);\r\n            })\r\n            .curve(curveMonotoneX);\r\n\r\n        let dataSet = range(n).map((d) => ({ y: randomUniform(0.3, 0.5)() }));\r\n\r\n        svg.select(\".x-axis\")\r\n            .attr(\"transform\", \"translate(0, 450)\")\r\n            .call(axisBottom(xScale));\r\n\r\n        svg.select(\".y-axis\")\r\n            .attr(\"transform\", \"translate(50, 0)\")\r\n            .call(axisLeft(yScale));\r\n\r\n        // 선 추가\r\n        svg.append(\"path\")\r\n            .datum(dataSet)\r\n            .attr(\"class\", \"line\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"blue\")\r\n            .attr(\"stroke-width\", \"1px\")\r\n            .attr(\"d\", myLine);\r\n\r\n        // 점 추가\r\n        // svg.selectAll(\".dot\")\r\n        //     .data(dataSet)\r\n        //     .enter()\r\n        //     .append(\"circle\")\r\n        //     .attr(\"cx\", function (d: any, i: any) {\r\n        //         return xScale(i);\r\n        //     })\r\n        //     .attr(\"cy\", function (d: any, i: any) {\r\n        //         return yScale(d.y);\r\n        //     })\r\n        //     .attr(\"r\", 3);\r\n    };\r\n\r\n    const draw2 = () => {\r\n        const svg: any = select(svgRef.current);\r\n\r\n        var n = 600,\r\n            duration = 750,\r\n            now: any = new Date(Date.now()),\r\n            count = 0;\r\n\r\n        var margin = { top: 20, right: 20, bottom: 20, left: 40 },\r\n            width = +svg.attr(\"width\") - margin.left - margin.right,\r\n            height = +svg.attr(\"height\") - margin.top - margin.bottom;\r\n        // g = svg\r\n        //     .append(\"g\")\r\n        //     .attr(\r\n        //         \"transform\",\r\n        //         \"translate(\" + margin.left + \",\" + margin.top + \")\"\r\n        //     );\r\n\r\n        const xScale = scaleTime()\r\n            .domain([now - 1000 * 60 * 10, now]) // 현재로부터 10분 전 까지를 범위로 지정한다.\r\n            // .domain([now - (n - 2) * duration, now - duration])\r\n            .range([0, width]);\r\n\r\n        var x: any = scaleTime()\r\n            .domain([now - 1000 * 60 * 10, now])\r\n            // .domain([now - (n - 2) * duration, now - duration])\r\n            .range([0, width]);\r\n\r\n        const yScale = scaleLinear().range([height, 0]);\r\n\r\n        var y = scaleLinear().range([height, 0]);\r\n\r\n        var myLine: any = line()\r\n            .x(function (d, i: any) {\r\n                // 값 위치 지정\r\n\r\n                // 실제 보여지는 범위는 range에 의해 축소되어있음.\r\n                // 1. 단순히 0 ~ 600 px 로 변환\r\n                // 2. 해당 비율을 반영해서 좌표를 지정\r\n                const xPos = ((x(now - 1000 * 60 * 10) + i) * width) / 600;\r\n\r\n                // console.log(xPos);\r\n                return xPos;\r\n            })\r\n            .y(function (d: any, i) {\r\n                return y(d);\r\n            });\r\n\r\n        // g.append(\"defs\")\r\n        //     .append(\"clipPath\")\r\n        //     .attr(\"id\", \"clip\")\r\n        //     .append(\"rect\")\r\n        //     .attr(\"width\", width)\r\n        //     .attr(\"height\", height);\r\n\r\n        svg.select(\".x-axis\")\r\n            .attr(\r\n                \"transform\",\r\n                `translate(${margin.left}, ${height + margin.bottom})`\r\n            )\r\n            .call((x.axis = axisBottom(x)));\r\n        // .call(axisBottom(xScale));\r\n\r\n        // var axis = g\r\n        //     .append(\"g\")\r\n        //     .attr(\"class\", \"x-axis\")\r\n        //     .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        //     .call((x.axis = axisBottom(x)));\r\n\r\n        svg.select(\".y-axis\")\r\n            .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`)\r\n            // .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(axisLeft(yScale));\r\n\r\n        // g.append(\"g\") // y\r\n        //     .attr(\"class\", \"axis axis--y\")\r\n        //     .call(axisLeft(y));\r\n        svg.append(\"path\")\r\n            .datum(data)\r\n            .attr(\"class\", \"line\") // (CSS)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"x\", \"40\")\r\n            .attr(\"stroke\", \"blue\")\r\n            .attr(\"stroke-width\", \"1px\")\r\n            .attr(\"d\", myLine)\r\n            .attr(\"transform\", `translate(${margin.left}, 0)`);\r\n\r\n        // g.append(\"g\")\r\n        //     .attr(\"clip-path\", \"url(#clip)\")\r\n        //     .append(\"path\")\r\n        //     .datum(data)\r\n        //     .attr(\"class\", \"line\") // (CSS)\r\n        //     .transition()\r\n        //     .duration(750)\r\n        //     .ease(easeLinear);\r\n    };\r\n\r\n    const onClick = () => {\r\n        //xXcale.domain 을 수정한다. 뒤에 하나추가, 앞에서 하나 제거\r\n        /*\r\n        x axis 를 선택해서 transtion 적용\r\n        */\r\n\r\n        const now: any = new Date(Date.now());\r\n        const duration = 750;\r\n        const svg: any = select(svgRef.current);\r\n\r\n        var margin = { top: 20, right: 20, bottom: 20, left: 40 },\r\n            width = +svg.attr(\"width\") - margin.left - margin.right,\r\n            height = +svg.attr(\"height\") - margin.top - margin.bottom;\r\n\r\n        var x: any = scaleTime()\r\n            .domain([now - 1000 * 60 * 10, now])\r\n            .range([0, width]);\r\n        // .domain([now - 1000 * 60 * 10, now])\r\n        // // .domain([now - (n - 2) * duration, now - duration])\r\n        // .range([0, width]);\r\n\r\n        var y = scaleLinear().range([height, 0]);\r\n\r\n        const myLine: any = line()\r\n            .x(function (d, i: any) {\r\n                const xPos = ((x(now - 1000 * 60 * 10) + i) * width) / 600;\r\n                return xPos;\r\n                // return x(now - (n - 1 - i) * duration);\r\n            })\r\n            .y(function (d: any, i) {\r\n                return y(d);\r\n            });\r\n        data.push(1);\r\n        svg.select(\".x-axis\")\r\n            .transition()\r\n            .attr(\r\n                \"transform\",\r\n                `translate(${margin.left}, ${height + margin.bottom})`\r\n            )\r\n            .call((x.axis = axisBottom(x)));\r\n\r\n        console.log(data);\r\n        svg.select(\".line\")\r\n            .attr(\"d\", myLine)\r\n            .attr(\"transform\", `translate(${40}, 0)`);\r\n        data.shift();\r\n        console.log(data);\r\n    };\r\n\r\n    /*\r\n    1. 라인차트 최대값 기준?\r\n    */\r\n\r\n    // 라인차트 데이터\r\n    // 초기에 10분 단위를 조회해서 보여준다.\r\n    // 시간대를 어떻게 매칭하는지\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            const start = Date.now() - 1000 * 60 * 10;\r\n            // const start = Date.now() - 1000 * 60 * 5;\r\n            const end = Date.now();\r\n            api.series(\"transaction/{stime}/{etime}\", {\r\n                stime: start,\r\n                etime: end,\r\n            }).then((result) => {\r\n                // console.log(\"start: \", new Date(start));\r\n                // console.log(\"end: \", new Date(end));\r\n                // // console.log(new Date(start), new Date(end));\r\n                // console.log(\"result\", result.data);\r\n                // console.log(\r\n                //     \"result\",\r\n                //     result.data.records.filter((item: any) =>\r\n                //         item.service.includes(\"seoul\")\r\n                //     )\r\n                // );\r\n                // // 중복 데이터가 없다?\r\n                // // 10분전 ~ 현재 를 조회하면 중복 데이터가 없다.\r\n                // console.log(\r\n                //     \"result\",\r\n                //     result.data.records.filter((item: any) =>\r\n                //         item.service.includes(\"/account/save/employee/seoul\")\r\n                //     )\r\n                // );\r\n                // console.log(\r\n                //     \"result\",\r\n                //     result.data.records.filter((item: any) =>\r\n                //         item.service.includes(\"/order/delete/employee/kwangju\")\r\n                //     )\r\n                // );\r\n            });\r\n        }, 5000);\r\n\r\n        // 정적 차트\r\n        // draw1();\r\n\r\n        // 동적 차트\r\n        draw2();\r\n\r\n        // setInterval(onClick, 5000);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={onClick}>이동</button>\r\n            <div>\r\n                Time <div className=\"infoIcon\"></div>\r\n            </div>\r\n            <div style={{ height: \"500px\", width: \"500px\" }}>\r\n                <svg\r\n                    width={500}\r\n                    height={500}\r\n                    ref={svgRef}\r\n                    style={{ height: \"500px\", width: \"500px\" }}\r\n                >\r\n                    <g className=\"y-axis\" />\r\n                    <g className=\"x-axis\" />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestChart2;\r\n","C:\\Users\\bzido\\frontend-test\\src\\api.js",["67"],"const DEMO_PROJECT_API_TOCKEN = 'XGJHUSQZTI2AVIENWA27HI5V';\r\nconst DEMO_PROJECT_CODE = 5490;\r\nconst OPEN_API_HEADERS = {\r\n  'x-whatap-pcode': DEMO_PROJECT_CODE,\r\n  'x-whatap-token': DEMO_PROJECT_API_TOCKEN,\r\n};\r\n\r\nconst OPEN_API_ROOT = 'https://api.whatap.io/open/api';\r\n\r\nconst OPEN_API = {\r\n  '': {\r\n    // 몇개 정해서 인포매틱스로?\r\n    act_agent: '활성화 상태의 에이전트 수',\r\n    inact_agent: '비활성화 상태의 에이전트 수',\r\n    host: '호스트 수',\r\n    cpucore: '호스트의 CPU 코어 합',\r\n\r\n    // 트랜잭션 관련\r\n    txcount: '트랜잭션 수',\r\n    tps: '초당 트랜잭션 수',\r\n    actx: '액티브 트랜잭션 수',\r\n\r\n    // 기타\r\n    user: '5분간 집계된 고유 사용자 수',\r\n    rtime: '평균 응답 시간',\r\n    cpu: 'CPU 사용률',\r\n\r\n    // 쓰레드 풀 관련\r\n    threadpool_active: '쓰레드풀 활성 쓰레드 수',\r\n    threadpool_queue: '쓰레드풀 큐잉 쓰레드 수',\r\n\r\n    // DB 관련?\r\n    dbc_count: '전체 DB Connection 수',\r\n    dbc_active: '활성(Active) DB Connection 수',\r\n    dbc_idle: '비활성(Idle) DB Connection 수',\r\n\r\n    // Active 관련?\r\n    act_method: '액티브 Method 수',\r\n    act_sql: '액티브 SQL 수',\r\n    act_httpc: '액티브 HTTP Call 수',\r\n    act_dbc: '액티브 DB Connection 수',\r\n    act_socket: '액티브 Socket 수',\r\n  },\r\n\r\n  // 하나 정해서 라인차트로\r\n  json: {\r\n    'exception/{stime}/{etime}': 'Exception 발생',\r\n    'sql/{stime}/{etime}': 'SQL',\r\n    'httpc/{stime}/{etime}': 'HTTP 외부호출',\r\n    'remote/{stime}/{etime}': 'client IP',\r\n    'transaction/{stime}/{etime}': '트랜잭션',\r\n  },\r\n};\r\nconst getPath = (url, param = {}) => {\r\n  let path = url;\r\n  for (let key in param) {\r\n    path = path.replace(new RegExp('\\\\{' + key + '\\\\}', 'g'), param[key]);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\nconst getOpenApi = (type) => (key, param) =>\r\n  new Promise((resolve, reject) => {\r\n    if (key in OPEN_API[type]) {\r\n      return resolve({ url: [OPEN_API_ROOT, type, key].filter((path) => !!path).join('/'), name: OPEN_API[type][key] });\r\n    } else {\r\n      reject('잘못된 API 정보');\r\n    }\r\n  }).then(({ url, name }) =>\r\n    fetch(getPath(url, param), {\r\n      headers: OPEN_API_HEADERS,\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => ({\r\n        key,\r\n        name,\r\n        data,\r\n      })),\r\n  );\r\n\r\nconst spot = getOpenApi('');\r\nconst series = getOpenApi('json');\r\n\r\nexport default { spot, series };\r\n","C:\\Users\\bzido\\frontend-test\\src\\reportWebVitals.js",[],{"ruleId":"68","severity":1,"message":"69","line":2,"column":5,"nodeType":"70","messageId":"71","endLine":2,"endColumn":15},{"ruleId":"68","severity":1,"message":"72","line":5,"column":5,"nodeType":"70","messageId":"71","endLine":5,"endColumn":9},{"ruleId":"68","severity":1,"message":"73","line":12,"column":10,"nodeType":"70","messageId":"71","endLine":12,"endColumn":13},{"ruleId":"68","severity":1,"message":"74","line":42,"column":11,"nodeType":"70","messageId":"71","endLine":42,"endColumn":17},{"ruleId":"75","severity":1,"message":"76","line":191,"column":8,"nodeType":"77","endLine":191,"endColumn":10,"suggestions":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":9,"column":5,"nodeType":"70","messageId":"71","endLine":9,"endColumn":14},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"68","severity":1,"message":"85","line":4,"column":5,"nodeType":"70","messageId":"71","endLine":4,"endColumn":14},{"ruleId":"68","severity":1,"message":"86","line":10,"column":8,"nodeType":"70","messageId":"71","endLine":10,"endColumn":11},{"ruleId":"68","severity":1,"message":"87","line":13,"column":7,"nodeType":"70","messageId":"71","endLine":13,"endColumn":11},{"ruleId":"68","severity":1,"message":"88","line":50,"column":18,"nodeType":"70","messageId":"71","endLine":50,"endColumn":25},{"ruleId":"89","severity":1,"message":"90","line":177,"column":17,"nodeType":"91","endLine":177,"endColumn":32},{"ruleId":"79","replacedBy":"92"},{"ruleId":"81","replacedBy":"93"},{"ruleId":"68","severity":1,"message":"94","line":2,"column":5,"nodeType":"70","messageId":"71","endLine":2,"endColumn":11},{"ruleId":"68","severity":1,"message":"95","line":6,"column":5,"nodeType":"70","messageId":"71","endLine":6,"endColumn":15},{"ruleId":"68","severity":1,"message":"96","line":8,"column":5,"nodeType":"70","messageId":"71","endLine":8,"endColumn":8},{"ruleId":"68","severity":1,"message":"97","line":9,"column":5,"nodeType":"70","messageId":"71","endLine":9,"endColumn":17},{"ruleId":"68","severity":1,"message":"98","line":15,"column":5,"nodeType":"70","messageId":"71","endLine":15,"endColumn":14},{"ruleId":"68","severity":1,"message":"99","line":17,"column":28,"nodeType":"70","messageId":"71","endLine":17,"endColumn":35},{"ruleId":"68","severity":1,"message":"100","line":17,"column":45,"nodeType":"70","messageId":"71","endLine":17,"endColumn":53},{"ruleId":"68","severity":1,"message":"101","line":22,"column":7,"nodeType":"70","messageId":"71","endLine":22,"endColumn":15},{"ruleId":"68","severity":1,"message":"102","line":23,"column":7,"nodeType":"70","messageId":"71","endLine":23,"endColumn":12},{"ruleId":"68","severity":1,"message":"103","line":34,"column":7,"nodeType":"70","messageId":"71","endLine":34,"endColumn":13},{"ruleId":"68","severity":1,"message":"104","line":39,"column":11,"nodeType":"70","messageId":"71","endLine":39,"endColumn":16},{"ruleId":"68","severity":1,"message":"105","line":110,"column":13,"nodeType":"70","messageId":"71","endLine":110,"endColumn":14},{"ruleId":"68","severity":1,"message":"106","line":111,"column":13,"nodeType":"70","messageId":"71","endLine":111,"endColumn":21},{"ruleId":"68","severity":1,"message":"102","line":113,"column":13,"nodeType":"70","messageId":"71","endLine":113,"endColumn":18},{"ruleId":"68","severity":1,"message":"107","line":125,"column":15,"nodeType":"70","messageId":"71","endLine":125,"endColumn":21},{"ruleId":"68","severity":1,"message":"106","line":211,"column":15,"nodeType":"70","messageId":"71","endLine":211,"endColumn":23},{"ruleId":"108","severity":1,"message":"109","line":85,"column":1,"nodeType":"110","endLine":85,"endColumn":33},"@typescript-eslint/no-unused-vars","'axisBottom' is defined but never used.","Identifier","unusedVar","'line' is defined but never used.","'arr' is defined but never used.","'apiObj' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["111"],"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'isWorking' is assigned a value but never used.","'axisRight' is defined but never used.","'api' is defined but never used.","'HOUR' is assigned a value but never used.","'setData' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["112"],["113"],"'active' is defined but never used.","'easeLinear' is defined but never used.","'max' is defined but never used.","'randomNormal' is defined but never used.","'timeParse' is defined but never used.","'useMemo' is defined but never used.","'useState' is defined but never used.","'now' is assigned a value but never used.","'count' is assigned a value but never used.","'margin' is assigned a value but never used.","'draw1' is assigned a value but never used.","'n' is assigned a value but never used.","'duration' is assigned a value but never used.","'xScale' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"114","fix":"115"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [data]",{"range":"116","text":"117"},[5403,5405],"[data]"]